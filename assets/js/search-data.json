{
  
    
        "post0": {
            "title": "Using Objects",
            "content": "Console Based Menu . Java imports allow user input and console output to be displayed in Terminal . Objects Used . Makes Object from Scanner Class to obtain inputs / menu selection from User | Use System Class, to call static methods System.out.print and System.out.println to output to console | User Math Class, to call static method Math.random() to generate random number | . Other College Board Topics . A 2D array is used to store COLORS | A Control Structure, Switch, is used to process Menu select to code that performs related action | . Key PBL Topic . Menu class when instantiated with new Menu() takes over Frontend experience with user. This is relevant to Draw Lab in this article and how Spring Boot works in Web programming. Objects are intended to encapsulate Frontend, Backend or experience ... Web Site control flow, Database CRUD operations, or a Menu in terminal (this example) | . // imports allow you to use code already written by others. It is good to explore and learn libraries. The names around the dots often give you a hint to the originator of the code. import java.util.Scanner; //library for user input import java.lang.Math; //library for random numbers public class Menu { // Instance Variables public final String DEFAULT = &quot; u001B[0m&quot;; // Default Terminal Color public final String[][] COLORS = { // 2D Array of ANSI Terminal Colors {&quot;Default&quot;,DEFAULT}, {&quot;Red&quot;, &quot; u001B[31m&quot;}, {&quot;Green&quot;, &quot; u001B[32m&quot;}, {&quot;Yellow&quot;, &quot; u001B[33m&quot;}, {&quot;Blue&quot;, &quot; u001B[34m&quot;}, {&quot;Purple&quot;, &quot; u001B[35m&quot;}, {&quot;Cyan&quot;, &quot; u001B[36m&quot;}, {&quot;White&quot;, &quot; u001B[37m&quot;}, }; // 2D column location for data public final int NAME = 0; public final int ANSI = 1; // ANSI is the &quot;standard&quot; for terminal codes // Constructor on this Object takes control of menu events and actions public Menu() { Scanner sc = new Scanner(System.in); // using Java Scanner Object this.print(); // print Menu boolean quit = false; while (!quit) { try { // scan for Input int choice = sc.nextInt(); // using method from Java Scanner Object System.out.print(&quot;&quot; + choice + &quot;: &quot;); quit = this.action(choice); // take action } catch (Exception e) { sc.nextLine(); // error: clear buffer System.out.println(e + &quot;: Not a number, try again.&quot;); } } sc.close(); } // Print the menu options to Terminal private void print() { //System.out.println commands below is used to present a Menu to the user. System.out.println(&quot;- n&quot;); System.out.println(&quot;Choose from these choices&quot;); System.out.println(&quot;- n&quot;); System.out.println(&quot;1 - Say Hello&quot;); System.out.println(&quot;2 - Output colors&quot;); System.out.println(&quot;3 - Loading in color&quot;); System.out.println(&quot;0 - Quit&quot;); System.out.println(&quot;- n&quot;); } // Private method to perform action and return true if action is to quit/exit private boolean action(int selection) { boolean quit = false; switch (selection) { // Switch or Switch/Case is Control Flow statement and is used to evaluate the user selection case 0: System.out.print(&quot;Goodbye, World!&quot;); quit = true; break; case 1: System.out.print(&quot;Hello, World!&quot;); break; case 2: for(int i = 0; i &lt; COLORS.length; i++) // loop through COLORS array System.out.print(COLORS[i][ANSI] + COLORS[i][NAME]); break; case 3: System.out.print(&quot;Loading...&quot;); for (int i = 0; i &lt; 20; i++) { // fixed length loading bar int random = (int) (Math.random() * COLORS.length); // random logic try { Thread.sleep(100); // delay for loading } catch (Exception e) { System.out.println(e); } System.out.print(COLORS[random][ANSI] + &quot;#&quot;); } break; default: //Prints error message from console System.out.print(&quot;Unexpected choice, try again.&quot;); } System.out.println(DEFAULT); // make sure to reset color and provide new line return quit; } // Static driver/tester method static public void main(String[] args) { new Menu(); // starting Menu object } } Menu.main(null); . - Choose from these choices - 1 - Say Hello 2 - Output colors 3 - Loading in color 0 - Quit - 1: Hello, World! 2: DefaultRedGreenYellowBluePurpleCyanWhite 3: Loading...#################### 4: Unexpected choice, try again. java.util.InputMismatchException: Not a number, try again. 0: Goodbye, World! . Desktop GUI Menu . Swing and AWT imports allow Java to provide a Graphical User Interface on the desktop. . Other College Board Topics . A 1D array is used to store MENUS | A Control Structure, if-else if-else, is used to process Menu selection to code that performs related action | . Key PBL Topic . Javax Swing UI | Timer with a TimerTask to allow action to repeatedly occur without halting thread. | . import java.awt.*; import java.awt.event.*; import javax.swing.*; import java.util.Timer; import java.util.TimerTask; // Graphical-User-Interface for Desktop in Java using Java Swing. public class MenuJFrame extends JFrame implements ActionListener { private JFrame frame; private JMenuBar menubar; private JMenu menu; private JLabel message = new JLabel(&quot;Click on Menu to select an action.&quot;); public final String[] MENUS = { // 1D Array of Menu Choices &quot;Hello&quot;, &quot;Colors&quot;, &quot;Loading bar&quot;, }; // Statics to assist with timer and messaging, single copy (no instance) private static int delay = 20; private static int step = 1; private static String hashes = &quot;&quot;; // Constructor enables the Frame instance, the object &quot;this.frame&quot; public MenuJFrame(String title) { // Initializing Key Objects frame = new JFrame(title); menubar = new JMenuBar(); menu = new JMenu(&quot;Menu&quot;); // Initializing Menu objects and adding actions for (String mx : MENUS) { JMenuItem m = new JMenuItem(mx); m.addActionListener(this); menu.add(m); } // Adding / Connecting Objects menubar.add(menu); frame.setJMenuBar(menubar); frame.add(message); // Sets JFrame close operation to Class variable JFrame.EXIT_ON_CLOSE frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); // set the size of window based on objects frame.setSize(300,200); // makes the frame object visible according to properties previously set frame.setVisible(true); // flow of control shifts to frame object } // event from user selecting a menu option public void actionPerformed(ActionEvent e) { // local variable to ActinEvent String selection = e.getActionCommand(); // menu selection String msg; // local variable to create response from action final String[] COLORS = {&quot;Red&quot;, &quot;Green&quot;, &quot;Blue&quot;}; // add more colors here final String start_msg = &quot;&lt;html&gt;&quot;; // html building final String end_msg = &quot;&lt;/html&gt;&quot;; final String hash = &quot;#&quot;; // run code based on the menuItem that was selected if ( selection.equals(MENUS[0]) ) { // Hello Action msg = &quot;Hello, World&quot;; message.setText(msg); } else if ( selection.equals(MENUS[1]) ) { // Color Action msg = start_msg + &quot;&lt;p&gt;&quot; + selection + &quot;&lt;/p&gt;&quot;; for (String color : COLORS) { msg += &quot;&lt;font color=&quot; + color + &quot;&gt;&quot; + color + &quot; &lt;/font&gt;&quot;; } msg += end_msg; message.setText(msg); } else { // Loading Bar Action String loading = &quot;&lt;p&gt;Loading&lt;/p&gt;&quot;; // Code to run on a Timer Timer timer = new Timer(); TimerTask task = new TimerTask() { public void run() { // Method for TimerTask // Static and Local variables used to manage message building int random = (int) (Math.random() * COLORS.length); // random logic MenuJFrame.hashes += &quot;&lt;font color=&quot; + COLORS[random] + &quot;&gt;&quot; + hash + &quot;&lt;/font&gt;&quot;; String msg = start_msg + loading + hashes + end_msg; message.setText(msg); // Shutdown timer and reset data if(MenuJFrame.step++ &gt; MenuJFrame.delay) { MenuJFrame.step = 1; MenuJFrame.hashes=&quot;&quot;; timer.cancel(); } }; }; // Schedule task and interval timer.schedule(task, 200, 200); message.setText(start_msg + loading + hash + end_msg); // prime/initial display } } // Driver turn over control the GUI public static void main(String[] args) { // Activates an instance of MenuJFrame class, which makes a JFrame object new MenuJFrame(&quot;Menu&quot;); } } MenuJFrame.main(null); . The Kernel crashed while executing code in the the current cell or a previous cell. Please review the code in the cell(s) to identify a possible cause of the failure. Click &lt;a href=&#39;https://aka.ms/vscodeJupyterKernelCrash&#39;&gt;here&lt;/a&gt; for more info. View Jupyter &lt;a href=&#39;command:jupyter.viewOutput&#39;&gt;log&lt;/a&gt; for further details. . Hacks . College Board and CTE competences. . Documentation / Analysis. Describe with Markdown Cell(s) and triple backtick code fragments the answers to the following... | Explain where a Class is defined | Explain where an instances of a Class is defined | Explain where code is calling a Method | Explain where code is Mutating data | Describe Console and GUI differences. Come up with an example could share Methods or Data between the two solutions? | Establish a list of using Classes that resulted in instantiating Objects. | Establish a list of using Classes that resulted in calling Static Methods. | . Coding Make a new Console or GUI lab for your own solution of interest, this is great opportunity to visualize data from Math, Physics, or other class using Math library. Look to make these changes in your work | Make constructors of different signatures. | Use Wrapper Classes of Integer and Double for define instance or static data in the Class | Use the Math Class in performing calculations | Use a Boolean expressions that uses a relational operators to branch code execution (ie if (x == 0) | .",
            "url": "https://nighthawkcoders.github.io/APCSA/units/2022/06/16/objects.html",
            "relUrl": "/units/2022/06/16/objects.html",
            "date": " • Jun 16, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "TT 1.2.0 Frontend Development - Tour of Thymeleaf and Layouts",
            "content": "Tour of Frontend . . This visual shows files for a Java Spring Boot Web Application project. The frontend of the project contains HTML files that are infused with Thymeleaf. Each frontend file has a backend has a Controller that loads the HTML template. In this illustration Greet.java loads greet.html, Birds.java loads birds.html, index.html is using default/non-visible Controller to load its page. This article will discuss the HTML files, the backend will discuss the Java files Read more or review files in the Spring Boot Reference Documentation . . HTML page (index.html) . The index.html file is infused with page specific fragments via Thymeleaf, it uses layouts/base.html as the template. Thus, files in this project are NOT pure HTML. The Thymeleaf pre-processor runs across all HTML files in this project, taking fragments and base to form pure HTML prior to files being sent to the Web Browser. Review comments in source code for understanding … . &lt;!-- This page is illustrative and contains ideas about HTML formatting --&gt; &lt;!DOCTYPE HTML&gt; &lt;!-- Signals HTML to understand Thymeleaf Layout Dialect --&gt; &lt;html xmlns:layout=&quot;http://www.w3.org/1999/xhtml&quot; xmlns:th=&quot;http://www.w3.org/1999/xhtml&quot; layout:decorate=&quot;~{layouts/base}&quot; lang=&quot;en&quot;&gt; &lt;head&gt; &lt;!-- Thymeleaf inserts below th:block into the &lt;head&gt; from layout/base.html --&gt; &lt;th:block layout:fragment=&quot;head&quot; th:remove=&quot;tag&quot;&gt; &lt;title&gt;Intro&lt;/title&gt; &lt;/th:block&gt; &lt;/head&gt; &lt;body&gt; &lt;!-- Thymeleaf inserts below into the &lt;body&gt; from layout/base.html --&gt; &lt;th:block layout:fragment=&quot;body&quot; th:remove=&quot;tag&quot;&gt; &lt;!-- Start of body content specific to page --&gt; &lt;div class=&quot;px-5 py-5 mx-auto&quot;&gt; &lt;h1&gt;&lt;strong&gt;Java Home Page&lt;/strong&gt;&lt;/h1&gt; &lt;!-- This page uses BootStrap defined in layout/base.html --&gt; &lt;div class=&quot;row&quot;&gt; &lt;!-- each row has 12 logical positions --&gt; &lt;div class=&quot;col-4&quot;&gt; &lt;!-- each card is grated 4 positions, 3 cards to a row --&gt; &lt;div class=&quot;card&quot;&gt; &lt;img class=&quot;card-img-top&quot; th:src=&quot;@{/images/java.png}&quot; alt=&quot;Java Development&quot; height=&quot;250&quot;&gt; &lt;div class=&quot;card-body&quot;&gt; &lt;h5 class=&quot;card-title&quot;&gt;What should Java Developers learn?&lt;/h5&gt; &lt;p class=&quot;card-text&quot;&gt; &lt;ol&gt; &lt;li&gt;Java 11-17 is used for PBL. Java 8 appears to be College Board standard. Java features like Reactive Streams, HTTP2 client, JShell, React JS are more recent than 8.&lt;/li&gt; &lt;li&gt;GitHub. Learning to master managing change, branches, pull requests, and more.&lt;/li&gt; &lt;li&gt;Development DevOps. Java programmers should have a passion for managing the environment and learning automation (Git, Maven, Docker).&lt;/li&gt; &lt;li&gt;REST and Microservice using Spring. Mastering creating and consuming RESTful APIs&lt;/li&gt; &lt;/ol&gt; &lt;/p&gt; &lt;a href=&quot;#&quot; class=&quot;btn btn-primary&quot;&gt;Go somewhere&lt;/a&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;col-4&quot;&gt; &lt;div class=&quot;card&quot;&gt; &lt;img class=&quot;card-img-top&quot; th:src=&quot;@{/images/spring.png}&quot; alt=&quot;Spring Development&quot; height=&quot;250&quot;&gt; &lt;div class=&quot;card-body&quot;&gt; &lt;h5 class=&quot;card-title&quot;&gt;What is Spring?&lt;/h5&gt; &lt;p class=&quot;card-text&quot;&gt; &lt;ol&gt; &lt;li&gt;Spring Framework is the most popular application development framework of Java. &lt;/li&gt; &lt;li&gt;Spring Boot helps to create a stand-alone application with less configuration.&lt;/li&gt; &lt;li&gt;Spring MVC is a model view controller-based web framework under the Spring framework.&lt;/li&gt; &lt;li&gt;ThymeLeaf is a server-side Java template engine, supports HTML5 JVM web development, and provides full integration with Spring Framework.&lt;/li&gt; &lt;/ol&gt; &lt;/p&gt; &lt;a href=&quot;#&quot; class=&quot;btn btn-primary&quot;&gt;Go somewhere&lt;/a&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;col-4&quot;&gt; &lt;div class=&quot;card&quot;&gt; &lt;img class=&quot;card-img-top&quot; th:src=&quot;@{/images/pojo.jpeg}&quot; alt=&quot;Java Persistence&quot; height=&quot;250&quot;&gt; &lt;div class=&quot;card-body&quot;&gt; &lt;h5 class=&quot;card-title&quot;&gt;How do you create Persistent data?&lt;/h5&gt; &lt;p class=&quot;card-text&quot;&gt; &lt;ol&gt; &lt;li&gt;Java Persistent API (JPA) provides a query language that allows create, read, update, and delete objects from a database.&lt;/li&gt; &lt;li&gt;Beans, Controller Code, and Business logic interact with the JPA to manage data in and out of the Database.&lt;/li&gt; &lt;li&gt;An Object-Relational Model (ORM) mapping Java classes (entities + supporting structures) with a relational database&lt;/li&gt; &lt;li&gt;Plain Old Java Objects (POJO) are the Class definitions that are foundations for JPA and ORM, see the @entity declaration over the Class definition.&lt;/li&gt; &lt;/ol&gt; &lt;/p&gt; &lt;a href=&quot;#&quot; class=&quot;btn btn-primary&quot;&gt;Go somewhere&lt;/a&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;!-- End of body content specific to page --&gt; &lt;/th:block&gt; &lt;/body&gt; &lt;/html&gt; . Layouts Folder . This folder contains a base.html and two fragments: footer.html and nav.html. These files form the standards for each HTML page in this Web Application project. The layouts/base.html is structural beginning file for index.html, greet.html, birds.html or any future file added to this project. This connection is made at the top of each HTML template, layout:decorate=”~{layouts/base}”. . As you look at the contents of the layouts/base.html think of it as the structure and common contents that will be in every HTML file. As you look back at the index.html, consider that it is starting with layouts/base.html and inserting its page specific fragments for the head and body. . Thymeleaf will put all these things together through a pre-process step. In the end, every HTML pages that is given to the Web Browser has style and structure from layouts/base, but content from its own HTML head and body. . &lt;!-- This page is illustrative and contains ideas about HTML layouts --&gt; &lt;!DOCTYPE HTML&gt; &lt;html xmlns:layout=&quot;http://www.w3.org/1999/xhtml&quot; xmlns:th=&quot;http://www.w3.org/1999/xhtml&quot; lang=&quot;en&quot;&gt; &lt;head&gt; &lt;!-- Required meta tags --&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1, shrink-to-fit=no&quot;&gt; &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot; /&gt; &lt;!-- JQuery CSS --&gt; &lt;script th:src=&quot;@{https://code.jquery.com/jquery-3.3.1.slim.min.js}&quot; integrity=&quot;sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo&quot; crossorigin=&quot;anonymous&quot;&gt;&lt;/script&gt; &lt;!-- Bootstrap CSS --&gt; &lt;link th:href=&quot;@{https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css}&quot; rel=&quot;stylesheet&quot; integrity=&quot;sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC&quot; crossorigin=&quot;anonymous&quot;&gt; &lt;!-- Project CSS --&gt; &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; th:href=&quot;@{/scss/custom.css}&quot;&gt; &lt;th:block layout:fragment=&quot;head&quot; th:remove=&quot;tag&quot;&gt;Head details are added by ThymeLeaf layout consumer&lt;/th:block&gt; &lt;/head&gt; &lt;body&gt; &lt;th:block th:replace=&quot;layouts/nav :: header&quot; th:remove=&quot;tag&quot;&gt;Standard header and Navigation&lt;/th:block&gt; &lt;th:block layout:fragment=&quot;body&quot; th:remove=&quot;tag&quot;&gt;Body details are added by ThymeLeaf layout consumer&lt;/th:block&gt; &lt;th:block th:replace=&quot;layouts/footer :: footer&quot; th:remove=&quot;tag&quot;&gt;Standard footer&lt;/th:block&gt; &lt;!-- Bootstrap 5.0 Bundle with Popper --&gt; &lt;script th:src=&quot;@{https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js}&quot; integrity=&quot;sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM&quot; crossorigin=&quot;anonymous&quot;&gt;&lt;/script&gt; &lt;/body&gt; &lt;th:block layout:fragment=&quot;script&quot; th:remove=&quot;tag&quot;&gt;&lt;/th:block&gt; &lt;/html&gt; . Resources Overview . . Resources are structure in standard directories for many reasons: familiarity amongst developer, tool defaults, deployment defaults, cache optimizations, etc. Here are some of introductions: . static/images - this is where a web server typically expects images that do not change after deployment. Service in deployment will cache these files for quick loading over the internet. | static/sccs - these are cached as well. This location and the sccs name state this will work with node tools. The standard is called Sassy and is the same as used in Python Flask projects. | templates/error - error pages can be placed here. Can you guess were you would put a 500 error page. | application.properties - this resource is used to define defaults for the application. Most of these default are used by backed, for instance this will be used to define location of a database. This is similar to __init__.py. | . .",
            "url": "https://nighthawkcoders.github.io/APCSA/techtalk/2022/06/16/TT113-frontend.html",
            "relUrl": "/techtalk/2022/06/16/TT113-frontend.html",
            "date": " • Jun 16, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "TT 1.1.2 Backend Development - Tour of Spring/Java",
            "content": "Tour of Backend . The backend for now is minimal as there is NO backend business logic. Mastering these simple activities is critical as backend will get much more complicated. . Main.java . Main.java contains the Class that is used to bootstrap and launch a Spring application from a Java main method. By default it will load index.html. . // @SpringBootApplication annotation is key to building web applications with Java https://spring.io/projects/spring-boot @SpringBootApplication public class Main { // Starts a spring application as a stand-alone application from the main method public static void main(String[] args) { SpringApplication.run(Main.class, args); } } . Birds.java . This is about as simple as an @Controller can get, it loads a page for view only. Note the @GetMapping which is used to associate a Web URL (/birds) with a Java Method (public String birds()) . @Controller // HTTP requests are handled as a controller, using the @Controller annotation public class Birds { // CONTROLLER handles GET request for /birds, maps it to birds() method @GetMapping(&quot;/birds&quot;) public String birds() { // load HTML VIEW (birds.html) return &quot;birds&quot;; } } . Greet.java . Purpose of Greet is to allow user to change Hello, World! greeting. This page is VERY important to learn in order to master passing data from frontend to backend using @RequestParam with associated keys and values. The key “name” HTML input and is mapped to the Java using wrapper Class, String name. In the method, String name is made back into key value using model.addAttribute(“name”, name). In this example, nothing is altered in, but this provides feedback and response framework that can be used for more sophisticated applications. . @Controller // HTTP requests are handled as a controller, using the @Controller annotation public class Greet { // @GetMapping handles GET request for /greet, maps it to greeting() method @GetMapping(&quot;/greet&quot;) // @RequestParam handles variables binding to frontend, defaults, etc public String greeting(@RequestParam(name=&quot;name&quot;, required=false, defaultValue=&quot;World&quot;) String name, Model model) { // model attributes are visible to Thymeleaf when HTML is &quot;pre-processed&quot; model.addAttribute(&quot;name&quot;, name); // load HTML VIEW (greet.html) return &quot;greet&quot;; } } . Hacks . Using creativity and research, can you come up with something that alters Hello, World application. Perhaps a question, answer, and evaluation for correct response. .",
            "url": "https://nighthawkcoders.github.io/APCSA/techtalk/2022/06/16/TT112-backend.html",
            "relUrl": "/techtalk/2022/06/16/TT112-backend.html",
            "date": " • Jun 16, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "TT 1.1.1 Fastpages - Tour of GH Pages / Fastpages",
            "content": "Tour of Fastpages . . GitHub Pages is a static site hosting service that takes files straight from a repository on GitHub,runs the files through a build process, and publishes a website. Fastpages is built on top of GitHub pages. Fastpages automates the process of creating blog posts, so you don’t have to manually run conversion scripts. This tour begins by looking at Explorer in VS Code. There are three automations to a GH Pages / Fastpages website... . _notebooks: jupyter .ipynb files. This allows building block of markdown, python, java, javascript into a jupyter notebook. | _posts: markdown .md files. This supports frontend web design with markdown, html, and javascript. | _word: word .docx files. This allows you to save Microsoft or Google documents into a docx format. Saving these directly to _word folder will streamline steps. | . Read more or review files in the fastpages README.md . . Resources . There are many resources, tutorials, and reference for building pages with HTML and Markdown. On these subjects, I would say learn it when you need it. Right clicking on Chrome provides View Page Source on any link on the Web. The APCSA/APCSP projects have many examples within these projects. Here are a couple of Web links I often find through google or refer to when looking for ideas … . HTML on W3Schools | Markdown Cheat Sheet | . Home Page . The Home page is sourced by the index.html file. This is the file to personalize and customize your Fastpages home page. BTW, index.html is the standard name for your web sites landing page. GH Pages / Fastpages builds allows you to mix Markdown and HTML&lt;/mark&gt; within the index.html file. . Sub Pages . Look under _pages folder within the Navigator. In this directory, there are several .md files. These allow a combination of HTML and Markdown. Observe that this project has prefix of 01, 02, 03 on the .md files allows control the order of menus from left to right… . 01_search.md: This provides a very cool search on the site. The search.md is renamed but the contents are untouched from fastpages project. | 02_tags.md: This provide a very cool tagging system that is related to the “categories: categoryname” that are seen at the top of all the GH Pages / Fastpages _posts. This tags.md is renamed but the contents are untouched from fastpages project. | 03_about.md: This page is left for your individual customization, similar to index.html | Developers can add .md file of choice and order according to preference. | . Images . Look under images folder and you will see files added to support the site. Some are for customization of the site others are for pages. . Site: favicon.ico, logo.png | Pages: agile.webp, apcsa.png | . GH Pages YAML files . The _config.yml has many strings and preferences that are specific to the site. The file is full of comments that describe what can be changed and what should remain untouched. Note, the .yml files will be seen again as we begin to deploy our own site with Docker. . Hacks . Personalize index.html file and build your own Fastpages / GH Pages for personal use throughout the year. . Add _pages/notes.md or _pages/vocab.md, insert between tags.md and about.md. Use this area to capture idea and terms throughout the year. | Add some personal study or work pages. Consider how you will use these in conjunction with notes/vocab pages, search, and tagging. Publish _notebook file | Publish _post file with image | Publish _docx file from Google Doc source | . | . Extra Credit . Consider using your home page for other subjects other than Computer Science. The searching and tagging features are very powerful and could help recall. .",
            "url": "https://nighthawkcoders.github.io/APCSA/techtalk/2022/06/16/TT111-fastpages.html",
            "relUrl": "/techtalk/2022/06/16/TT111-fastpages.html",
            "date": " • Jun 16, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "TT 1.1.0 Focus and Habits - Yale Professor on Successful People",
            "content": "Psychology and the Good Life, by Laurie Santos . This video is very relevant to students. Laurie Santos is a professor at Yale has produced one of the most popular classes of all time at Yale (1 of 4 students take this class). . Teacher Notes . In my first watch of this video, right after 2021-2022 school year, these were my observations in improving the well being of Computer Science at Del Norte. . The Teacher needs to reduce academic stress on students. | The Teacher needs to convince Students to form habits of successful people, as discussed in the video. These habits need to be formed collaboratively between Teacher and Student. | Students need to strive to form an attitude of success for life. This takes effort and commitment. Similar to exercise analogies discussed in video. | In active discussions with Ms Naidu who taught at Del Norte in 2021-2022, we determined the biggest weakness in students our students is Collaboration, not Technical. | Laure Santos request that students be grateful for their current situation. | . Teacher Message . The AP Computer Science classes at Del Norte in 2022-2023 is structured to do most of the work in the classroom. Students, please prioritize the 4C habits: Collaboration, Communication, Critical Thinking and Creativity in classroom. Additionally, focus, ask questions, Code/Code/Code&lt;, and make mistakes. If you do these things, you are in danger of getting 90% on all your assignments. . Agile and Psychology of the Good Life . A lot of the way we go Agile, Sprints, and Scrums is helping to establish habits and focus. As Engineers, we need to learn to put things together and not consider everything as disparate. . Habit helpers: Stand-up meetings, Issues, Scrum Board, Review Tickets, Sprints | Focus helpers: Reviewing Issues, Pair Coding, Making mistakes, Fixing Bugs, Scrum accountability | . Hacks . Watch and build a vocabulary on the “Psychology and the Good Life” and maintain it on GH Pages, look for connections between Good Life and Agile. | Write a note of gratitude to someone on campus and someone at home, record your experience in GH Pages. | .",
            "url": "https://nighthawkcoders.github.io/APCSA/techtalk/2022/06/16/TT110-focus.html",
            "relUrl": "/techtalk/2022/06/16/TT110-focus.html",
            "date": " • Jun 16, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "TT 1.0.1 Roles, Agile, Issues, and Scrum Board",
            "content": "Agile Methodology . . Agile software development uses practices such as pair programming, test-driven development, stand-ups, planning sessions, and sprints. Agile includes the 12 Principles expressed in the Manifesto for Agile Software Development. . . Roles . To ensure transparency during the sprint the Team should meet daily at the daily scrum ( sometimes called a standup). As adaptation for classroom, Team should have a standup meeting for weekly plans, should have assignments for tasks, assignments for integration and deployment. . Scrum Master: The scrum master helps to facilitate the sprint by ensuring that an agile framework is followed. He/she is committed to tracking issues and maintaining scrum boards, but should also remain flexible and open to opportunities for the team to improve their workflow. | DevOps: DevOps is the combination of cultural philosophies, practices, and tools that increases an team’s ability to deliver applications and services at high velocity: version control, integration, managing dependencies, POM file management, AWS deployment are some of the key functions that impact velocity. | Development Team: The development team can be comprised of all kinds of people including designers, writers, presenters, developers, etc. Two key roles in Web Development are … Frontend Developer: A front-end developer builds the front-end portion of websites and web applications—that is, the part that users actually see and interact with. | Backend Developer: Back-end developers a build and maintain the mechanisms that process data and perform actions like data storage, security, and other server-side functions that you cannot see. | . | . Workload . When planning there is an expectation of time. . Individual in Class Time. You should expect 3 to 4 hours of productive classroom work each week. | Individual at Home Time. To maintain pace in this class, you should consider a 2 hour coding or design session (weekly) outside of class time. | Sprint Calculation Time. 5-6 hours of coding or planning per week per individual, or 20-24 hours per team. If we had a two week Sprint this would be 40-48 hours of work. | Key to success. Make great use of time in class. Pair share programming typically provides three time dividend over individual programming when you are learning something new. | . Issues . Sprint cadences have ideas/issues that are broken into short term work units called tasks. . Scrum Board / GitHub Project / Kanban Style . The Scrum Board contains issues that are assigned to individuals, each of these issues will have tangible deliverable links (code/video/…). Scrum Team will use Scrum Board to understand everyone’s ideas and efforts. This includes individual tasks. Use GitHub Projects add Issues to the board. Issues are placed in columns on a Scrum Board (Kanban) to represent progress. The below columns have been successful in our academic environment. . To do/backlog | In progress | Complete | Deployed | Done | Sprint . Sprint is a period of time that Team uses to plan work and execute work. This includes planning, research, development, deployment, and test. Typically, sprints will be 2 weeks or longer in the classroom. Anytime a sprint lasts longer than a week, there will be a weekly Review Tickets (formative assessment) and concluding with an end of Review Ticket (summative assessment). Sample sprint follows… . Week 1 Monday - Sprint Objectives, Scrum Team Planning | Tuesday - Test Prep Tuesday (Student Led) | Wednesday - Code, Code, Code | Thursday - Tech Talk (Teacher) | Friday - Code, Code, Code; Teacher 1 v 2, formative review | 2 hours outside of class for project work | . | Week 2 Monday - Sprint Crossover Grading, Scrum Team Planning | Tuesday - Test Prep Tuesday (Student Led) | Wednesday - Code, Code, Code | Thursday - Tech Talk (Teacher) | Friday - Code, Code, Code; Teacher 1 v 4 including Demos/Review Ticket/Peer, summative review | 2 hours outside of class for project work | . | . 7 Important Transferable Skills . Assessments / Reviews . During Teacher reviews meetings ( 1 v 2 pair, 1 v 4 team), the pair or team will provide Teacher with an Issues that that will be called a Review Ticket. The issue will be completed, it will reference Tasks Completed and Self/Crossover Score(s). Canvas should be used as a guide to completing a review ticket, make sure you account for everything. Make sure Point total is a the top of ticket, if points are important to you! All assessments will be looking for these 7 elements in your work… . Creativity Creativity doesn’t necessarily mean you paint or draw or sculpt well. Creativity in education and workplace, in many cases, presents itself in terms of how you approach tasks and solve problems, Do you both inside and outside of the box for solutions? Or, do you stick to a planned system? If you solve even the smallest problem, you’ve demonstrated creativity. This skill scales up: Big problems are enlarged small problems; small problems scaled are big problems. Conceptualize problems and solutions | Display foresight | Make connections | Make intelligent inferences | Synthesize ideas and data | . | Critical thinking Solving complex or abstract problems requires critical thinking, especially when the problems are critical. Not only that, but critical thinking skills also enable the discovery of deficiencies that could cause less than optimal results. The ability to take a step back and look at things more critically and say ‘Where might we have to have gotten this wrong?’ or ‘How might we be able to improve this?’ is critical thinking. IIf you can articulate this skill you will stand out! | Critical thinkers head off problems before they arise. And if they do surface, they take them head-on. | . | Communication Effective communication is the crux of everything you do.. It doesn’t matter how creative or intelligent you are, or how many computer languages you know: If you can’t communicate well, your other skills are meaningless. Students are encouraged to talk about how they were able to bring their teams together. Verbal skills. How do you address an audience in terms they can understand. | Listening skills. Learning and understanding without defensiveness. | Writing skills. You need to be able to write in such a way that non-experts will understand. | Technological communication skills. You should be able to discuss highly technical hard skills in a way appropriate to your audience. Communication details are not the same for all audiences. | . | Collaboration through Leadership Leadership skills generally encompass communication, problem-solving and managing conflict, relationship building and being able to get people on your team on board with a mission or project. Leaders are big-picture thinkers who take various interests into account when making major decisions. Leaders are responsible for: Delegating responsibility | Demonstrating effective time management | Initiating new ideas | Major decision-making | Managing conflict | Managing groups | Multitasking | Teaching and mentoring | . | Collaboration - Teamwork Individuals that work well with others. This is a important category mentioned in early school. But it applies to High School, College and adults. Trust is the major difference between working alone versus working in groups. And trust can be hard: Some people are skeptical by nature or want to work through an entire project lifecycle solo. But placing trust in an active, dynamic team provides more than just project completion. Teamwork — a sense of community — elevates spirits and improves productivity. Accepting responsibility | Making and implementing decisions | Managing time wisely | Meeting both short- and long-term goals | Organizing | Setting and meeting deadlines | . | Researching Research is not a process performed by Teacher, Boss, or some upstream process. Everything you do in Technology requires research. Research is a key part of the lifecycle: changing plans, fluctuating results, and roadblocks require research before anyone can take action. Conversing with team members is a form of research: If you’ve asked a peer’s opinion on a technical matter, you’ve performed research. Analyzing information | Brainstorming solutions | Delineating needs and requirements | Extracting information from data | Gathering information | Forecasting possible roadblocks | Setting goals | Solving problems | . | Technical We live in a tech-heavy world, and you need to understand the tech your project requires. Try to stay current with the many technical advancements on your project. Make sure that play with the different softwares and platforms that are part of your environment. Be knowledgeable and speak to the technical things that you are learning. Being easy to work with | Quick to learn | Glad to learn | Failing and always willing to try new things | Willing to open new doors in case of a drastic oversight | . | Hacks . Key deliverables of this Tech Talk… . Build Team Agile Methodology Diagram, add Team Member roles | Create a Scrum Board as output of Team Stand-up Meeting | Build an individual Issue | Add to PBL vocabulary on your GH Pages | .",
            "url": "https://nighthawkcoders.github.io/APCSA/techtalk/2022/06/16/TT101-roles.html",
            "relUrl": "/techtalk/2022/06/16/TT101-roles.html",
            "date": " • Jun 16, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "TT 1.0.0 - Tools and Equipment",
            "content": "Tools and Equipment make Development Easy . Learning Development tools, working with Projects, is the key to a rapid entry into Code/Code/Coding. A Computer, Git, and an Code Editor are the starting points for coding. . Computers using either MacOS, Windows, or Linux are requirements for the course. | GitHub, is Git hosted in the Cloud. It is the defacto hosting platform for version control and collaboration. It lets you and others work together on projects from anywhere in the world. Think of it as the Google Docs for Coders. Version Control is the task of keeping a software system of many versions and configurations well organized. | Version Control History of files and changes in Version Control System (ie GitHub) is very important! Ultimately, any Coder will break things or delete things! Looking at older versions and configurations at a microscopic detail is sometimes the only way to unwind bugs. | . | Visual Studio Code (abbreviations VS Code, VSCode or VSC) is a powerful Code Editor. VSCode performs a lot of magic and automation behind the scenes to make your Code/Code/Coding life easier. There is a back-in-the-day story hear, but short version is VSCode qualifies, IMO, to be called and Integrated Development Environment (IDE). It allows you to Edit files, Build your Code, and Pull/Push Code from and to the GitHub. FYI, VSCode is new to APCS this year, former IDE’s used in CompSci classes include XCode, Eclipse, and IntelliJ. | Jupyter Documents (.ipynb) is a document format for creating and sharing computational documents. These documents allow you to compute segments of Python or Java code as you are taking notes. These are new to AP CS this year, but are viewed as very powerful in gaining a quick understanding of coding concepts. Jupyter documents are often called “notebooks”. | . Equipment, accounts and tools . A laptop, bring a laptop to class every day with the Development Tools installed on it. Computers issued by the School, ie Chromebook, are not effective because of the restrictions placed on adding software by PUSD. If you have any problems obtaining a Computer where you can install software!, please attend Office Hours immediately | GitHub Account, VSCode will be used to clone/push/pull changes. GitHub is where we store and share code in the cloud, think of Google Docs but for Code. | GitHub Pages will be used to host your personal web site, notes, and experiences. Review GitHub concepts 2-min https://www.youtube.com/watch?v=phGdqJB6ep0 | Jupyter Documents will be used in conjunction with GitHub Pages to build running Java Code in to your Technical Notes. Review Jupyter basics 6-min https://www.youtube.com/watch?v=3jZYC9rGrNg | Slack Account, install App on Laptop, get used to reading announcements. Slack is a messaging tool similar to Discord, the first year we had 35,000 message in a class. | Java is the key language you will be using in this class. Spring, Thymeleaf, HTML, CSS, JavaScript are the key supporting technicals you will be using to enhance your learning of Java. | VS Code is the code editor we will be using in this class. VS Code is more than and editor, it is called and Interactive Development Environment (IDE). | AWS Account for cloud computing and deployment, account access will be provided by Teacher. AWS Cloud Computing and Electric Cloud Computing (EC2’s) will be used to Deploy and Support projects on the Internet. | . GitHub Account . Follow instruction https://docs.github.com/en/get-started/signing-up-for-github/signing-up-for-a-new-github-account | . MacOS 1st Time Developer (consider this an Introduction to Linux) . Install Homebrew from Terminal https://brew.sh Copy “bash … curl …” command using box on website | Launch Terminal from search bar and Paste “bash … curl …” command into Terminal … This will take a long time, 10-min, there will be a prompt in the middle about 5-minutes | At end you will see to long commands that you MUST Copy and Paste two into the terminal: “echo …” and “eval …”. Copy them as they are shown, they will not provide any feedback | Leave Terminal open | . | Install MacOS Git from https://git-scm.com/downloads Type brew command in terminal as shown on the website “brew install …”. This command will provide feedback and talk about 1-min. | . | . Windows 1st Time Developer . Install Windows Git from https://git-scm.com/downloads | . VSCode Installation and Setup . VS Code https://code.visualstudio.com/docs/languages/java Install the Coding Pack for Java | Install Extension Pack | Spring Boot Extension Pack | . | . VSCode Java Project . Start Java GitHub Repo from Template https://github.com/nighthawkcoders/spring_portfolio/generate VS Code Clone new GitHub Project | Run/Play your project from Main.java | In Chrome or browser, run localhost:8080 | Push a minor change and Verify on GitHub https://code.visualstudio.com/docs/editor/versioncontrol#_git-support | . | . VSCode Fastpages Project . Start Pages/Fastpages GitHub Repo from Template https://github.com/nighthawkcoders/APCSA/generate Recommended Video | Verify GitHub pages is running | Install Jupyter Kernel Spec for Java (IJava) on your machine https://github.com/SpencerPark/IJava#install-pre-built-binary More on Jupyter Kernel if problems occur https://www.geeksforgeeks.org/how-to-install-jupyter-notebook-on-macos/ | . | VS Code Clone new GitHub Project | Run/Play a Jupyter notebook _notebooks/2022-06-14-anatomy.ipynb | Push a minor “markdown” change and Verify on GitHub https://code.visualstudio.com/docs/editor/versioncontrol#_git-support | Verify “markdown” change on GitHub Pages | Create a new Jupyter notebook and publish to _notebooks directory https://code.visualstudio.com/docs/datascience/jupyter-notebooks | . | . VSCode Marketplace and Extensions . . Visual Studio Code claims to provide just the tools a developer needs for a quick code-build-debug and version control cycle. It provides a Market Place for enhancements and more complex workflows. Before adding extensions, clone projects and see what is requested or added. Here are some extension that were added through that process or that I have added... . Extension Pack for Java, Debugger for Java: These are fundamental for Java Development | Jupyter: This supports build jupyter ipynb files from within VS Code | Code Spell Checker: Got to have it when building documents, particularly if you spell and typo like the Teacher. | IntelliCode: Got to have it when creating a code file, it will sense type of code by extension. Also, it help with syntax as you are coding. | Java / Spring behind the scenes | : Language Support for Java, Maven for Java, Project Manager for Java, Spring Boot Dashboard, Spring Boot Extension Pack, Spring Initializr Java Support, Test Runner for Java&lt;/li&gt; . Review Details in Marketplace for better explanation of purpose of the things explained above. There is a lot more! As you need Git help look at things like Git History and GitLens. Or, perhaps you enjoy Vim and want Vim emulation for editing, their is an extension for that. Later, there may be interest in AWS Toolkit or Deploy extensions. We will learn more about Marketplace Extensions as we do more. . . Hacks . Students need to demonstrate all these tools running to Scrum Team and then the Teacher. Issues need to be worked out quickly. Before asking Teacher ask 3 other students. Do not delay in Tool Setup task, there will be no late makeup for points!!! Tool and Equipment setup is like attendance, without Tools and Equipment you are effectually absent. . Show personal Fastpages / GitHub pages running on github.io | Show GitHub code commit on Fastpages project | Show Java project running on personal laptop localhost:0.0.0.0:8080 | Show GitHub code commit Java on project | . College Board and CTE competencies . Create Java projects in an Integrated Development Environment (VS Studio, Eclipse, IntelliJ) .",
            "url": "https://nighthawkcoders.github.io/APCSA/techtalk/2022/06/16/TT100-tools.html",
            "relUrl": "/techtalk/2022/06/16/TT100-tools.html",
            "date": " • Jun 16, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "Tri2 Overview - 2021-2022 Winter review",
            "content": "Time Box Tri 2 . Week Stand Up Theme Test Prep Tech Talk Canvas . 11 | Finals Week | none | N@tM | PBL Final | . 10 | Surprise Test and Tri 3 Intro | none | TT10 | Final MCQ Test | . 9 | Student Tech Talks | none | TT9.1Search, TT9.2Sassy | PBL Part 1 | . 8 | Data Ops, Linked List of Objects | FRQ9 Books, FRQ10 GCF | TT8 | Pair/Trio Showing 2 | . 7 | Data Ops, Sorts | FRQ7 Users, FRQ8 Plots | TT7 | Pair/Trio Showing 1 | . 6 | Midterm, FRQs, and Ketchup | FRQ6, Enhanced for loop | TT6 | Mid Term FRQ and Vocab | . 5 | Data Ops, Generics | FRQ5, Invitation | TT5 | PBL Showing | . 4 | StringOps, Jekyll | FRQ4, Streak | TT4 | 3, 4, 5 | . 3 | TO DB Training | FRQ3, RSVP | TT3 | WIP Review | . 2 | Certbot, 1to1 | FRQ2, Light Sequence | TT2.1 TT2.2 | Home Pages | . 1 | SCCS, Async | None | TT1.1, TT1.2 | Project Approval | .",
            "url": "https://nighthawkcoders.github.io/APCSA/tri2/2022/06/15/Tri2-overview.html",
            "relUrl": "/tri2/2022/06/15/Tri2-overview.html",
            "date": " • Jun 15, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "Overview Sprint - Java, PBL, and Tools",
            "content": "AP CSA COURSE OUTLINE . Methodology. Project Based Learning (PBL) | Guideline. The 10 Units of AP Computer Science A | Key Learnings for 2022-2023 Collaboratively Build, Deploy and Host Web Pages | Programming, Algorithms, Databases, and APIs | Team and Individual Project will highlight all 10 units, either academically or in interest fashion | . | Establish “Real World” Scrum Team projects Preference is to establish projects with a Customer/Sponsor | Projects will be tracked using GitHub README (Time Box), Issues and Projects tools | . | Create “GitHub Pages” Individual postings and notebooks Build individual GitHub Pages Web Site to _post Notes and Learnings | . | AP testing in May | . “Real World” Projects . You, your pair, and your Scrum Team will collaboratively Build, deploy and host Web Site. This Web project contains Technicals learned throughout the Trimester. This will be done in increments. Each Monday an assignment will be given and the previous will be under Live Review. . Feature Considerations for Project Project Requirements A fun zone, unique idea(s) | Educational zones that capture every key learning objective | A location that highlights individuals, jobs, and technical capabilities | . | Project Technicals Managing PBL Requirement for Project (Issues, Scrum Board) | Use of “Java Classes” in backend. | Use of “Thymeleaf” in frontend | Data Structure exchange between frontend and backend | . | . | Individual GitHub Pages considerations for Java Units 1-10 Each week we will be studying Java in Tech Talk and/or Test Prep | GH Pages should be used like notes to capture PBL and Java learnings each week! | Jupyter Notebooks using IJava and Markdown will be required to show Java learnings, Teacher likes running code! | . | . Establish PBL and Comp Sci attitude . Attitude. An Agile mindset is not knowing the answer, making lots of mistakes and performing iteration. A successful grade is dependent on making mistakes, research, and iteration. | Suggestion. Please bring a personal laptop to class daily. The Internet and AP Classroom web site will be considered text book. | Requirements. Everything will be distributed electronically. All code you develop will be delivered to the Cloud. | Grading guidelines. There will be key technical objectives which will require producing tangibles. Essentially, it is impossible to be late with work if you work consistently attend class, work in class and turn in progressive tangibles each week. Thus, failure to have work will result in a 10% deduction. Additionally, late work must be defended in office hours. High “A” is very tough to achieve, something beyond the tangible requirements. Something that exhibits an unforced desire to Code/Code/Code. | Low “A” is consistency in producing tangibles toward Team Project and Individual GH Page according to Issues and Scrum Board plans. Plans must be consistent with key objectives and technicals. | “B” is having flaws in consistency or tangible shortcomings, but mostly on track. A flaw would be mostly working code. | “C” is a lack consistent effort, lacking tangibles. Lack of producing working Code. | Below “C” is composed of Slash/Slash/Slash offenses. Lack of attendance, disruptive behaviors, doing work from other classes during class time, paper visible in class, and turning in tangibles that you can’t represent in live review. | . | . Assignments and Work . Assignments mostly Due either Friday or Monday at the start of class (canvas is official record for points) Live Grading that is complemented by Self/Crossover assessments | Always prepare Review Ticket (GH Issue) using canvas as guide | . | Trimester start with 5 point seed (highly engaged +, distracted -) | Less than 100 points per trimester, approximately 30% of points in last few weeks of Trimester. | . PBL Sprint 0 / Week 0 . Learning outcome. Getting adapted to the Agile mindset used in Computer Science. Additionally, getting introduced to GitHub and VS Code. Building a Java/Spring Web Server on your localhost. Showing personal and running Fastpages/GitHub Pages. . Wednesday - “Introduction Sprint”. Pick pair share partner, Pick crossover pair, Establish team of four. Based off of modulo mathematics (remainder) there can only be 3 teams of 5 maximum. Spend some time talking and getting to know each other. Consider key roles in Project Teams as Scrum Master (Issues, Scrum Board), DevOps (GitHub, Deploy, POM dependencies), Frontend Developer (HTML, Thymeleaf, Javascript), Backend Developer (Spring, Java) | Thursday - Review “Tools and Equipment” and “Anatomy of Java”. Bringing your laptop. Setup GitHub and Tools and push code to your Repo. | Friday - Review “Roles, Issues, and Scrum Board”. Pair Share coding. Spend 30 minutes at keyboard installation and performing Jupyter coding, while Pair Share observes and consults. Next 30 minutes Pairs reverse roles. | . Equipment, accounts and tools . A laptop, that you bring to class every day with the Development Tools installed on it. | GitHub Account, VS Code will be used to push/pull changes. GitHub is where we store and share code in the cloud, think of Google Docs but for Code. | GitHub Pages will be used to host your personal web site, notes, and experiences. | Jupyter Notebooks will be used in conjunction with GitHub Pages to build running Java Code in your Technical Notes. | Slack Account, install App on Laptop, get used to reading announcements. Slack is the tool will use for messaging, we have been averaging 35,000 message per class. | Java is the key language you will be using in this class. Spring, Thymeleaf, HTML, CSS, JavaScript are the key supporting technicals you will be using to enhance your learning of Java. | VS Code is the code editor we will be using in this class. VS Code is more than and editor, it is called and Interactive Development Environment (IDE). | AWS Account for deployment, this will be provided by Teacher. AWS Cloud Computing and Servers will be used to Deploy and Support projects. | . Extra Credit (Seed +) . Find the flaw Java/Spring project. Java Spring project uses Vanta Birds. When present on screen, the last element in drop down menu can’t be activated. This is often referred to as a ‘layering problem’. | Find the flaw in Java/Spring POM file dependencies. Switching to using Java 17 SDK an changing to Java 17 in POM file causes a compiler error. Try to negotiate the POM file incompatibility error. | Find the flaw in FastPage using VSC and Jupyter. In my environment when editing Jupyter Notebook (ipynb file), I often receive many Output errors. They seem benign, but are annoying. | . Posts and Tech Talks . Overview Sprint - Java, PBL, and Tools | TPT Unit 00 Anatomy of Java | TT 1.0.0 Tools and Equipment | TT 1.0.1 Roles, Issues, and Scrum Board | .",
            "url": "https://nighthawkcoders.github.io/APCSA/tri1/2022/06/15/Tri1-introduction.html",
            "relUrl": "/tri1/2022/06/15/Tri1-introduction.html",
            "date": " • Jun 15, 2022"
        }
        
    
  
    
        ,"post9": {
            "title": "Innovation Sprint - Technologies in Java Web Apps",
            "content": "Innovation Sprint (Weeks 1 and 2) . Innovation is a time to explore, learn, and obtain skills needed to reach goals. . Exploration in building 1st Java Spring Web App | Capturing notes while building Fastpages/GitHub pages yearlong individual notebook | Reviewing the Anatomy of Java; coding using Java Primitives, | Establish positive PBL habits: a focused mindset in the classroom, using work habits to achieve success. | . Plans Week 1 . Discuss College Board Units 1 - 10; Tours of Backend Code; Innovate and Plan/Plan/Plan before Code/Code/Code. Always Code/Code/Code in classroom when schedule allows! Practice Pair Programming Habit of 30 minutes/30 minutes/1 commit each. . Monday: “Live Review” with pairs: show personal version of the “Anatomy of Java” on GH Pages, show “Personal Computer plan” post. | Tuesday: Test Prep - Discuss Unit 1: Primitive Data Types; College Board AP classroom overview; establish 10 week schedule for 10 units. | Wednesday: Tech Talk - Focus and Habits. Scrum Team must elect Scrum Master, create Issues and Kanban Scrum Board. Individual/Pair Programming on Primitive Types and Hacks on their GH Pages . Individual/Team Programming should consider how to modify Menu and establish Frontend/Backend workarea for each individual according to high level design. | Thursday: Tech Talk - Jupyter Notebooks: Tour of FastPages/GH Pages. | Friday: Tech Talk - Backend Development: Tour of Spring/Java. | . Plans Week 2 . Review College Board Unit 1 &amp; 2; Individual and Pair Code/Code/Code when schedule allows. . Monday: Live Review with pairs showing post on “Focus and Habits”. FYI, a Live Review is expecting student to drive dialog and questions. Learn that Teacher likes: questions, discussion of failures, showing a progressive mindset. | Tuesday: Test Prep 2 - Review Unit 1, Discuss Unit 2. | Wednesday: Tech Talk - Frontend Development: Tour of Thymeleaf and Layouts | Thursday: Work Day | Friday: Live Review with Scrum Masters and Team “Innovation, Collaboration, and Planning” | . Points and Tangibles . Points (see canvas), live reviews will be scheduled in class. Everything will be crossover or pair graded using a “Review Ticket” Individual _posts: “Focus and Habits” video from Yale | _posts: “Personal Computer Plan” | _notebooks: “Anatomy of Java” | _notebooks: “Primitive Data Types” | . | Team “Issues” and Scrum Board” | Localhost project running with Menu and Controller adjustments | . | . | . Posts and Tech Talks . Innovation Sprint - Technologies in Java Web Apps | TPT Unit #01 Primitive Data Types | TPT Unit #02 Using Objects . | TT 1.1.0 Focus and Habits: Yale Professor on Successful People | TT 1.1.1 Jupyter Notebooks: Tour of FastPages/GH Pages | TT 1.1.2 Backend Development: Tour of Spring/Java | TT 1.2.0 Frontend Development: Tour of Thymeleaf and Layouts | .",
            "url": "https://nighthawkcoders.github.io/APCSA/tri1/2022/06/15/Tri1-innovation.html",
            "relUrl": "/tri1/2022/06/15/Tri1-innovation.html",
            "date": " • Jun 15, 2022"
        }
        
    
  
    
        ,"post10": {
            "title": "Primitives",
            "content": "College Board Summary . College Board focus is on primitive types of int, double, and boolean. In unit1, String is mentioned, but it is technically a Wrapper Class. The primitive type associated with String is the single characther char. String is an array of char&#39;s and the uppercase S in String means it is a Class. . Input Primitive data . // java style to import library import java.util.Scanner; // class must alway have 1st letter as uppercase, CamelCase is Java Class convention public class ScanPrimitives { public static void main(String[] args) { Scanner input; // primitive int input = new Scanner(System.in); System.out.print(&quot;Enter an integer: &quot;); try { int sampleInputInt = input.nextInt(); System.out.println(sampleInputInt); } catch (Exception e) { // if not an integer System.out.println(&quot;Not an integer (form like 159), &quot; + e); } input.close(); // primitive double input = new Scanner(System.in); System.out.print(&quot;Enter a double: &quot;); try { double sampleInputDouble = input.nextDouble(); System.out.println(sampleInputDouble); } catch (Exception e) { // if not a number System.out.println(&quot;Not an double (form like 9.99), &quot; + e); } input.close(); // primitive boolean input = new Scanner(System.in); System.out.print(&quot;Enter a boolean: &quot;); try { boolean sampleInputBoolean = input.nextBoolean(); System.out.println(sampleInputBoolean); } catch (Exception e) { // if not true or false System.out.println(&quot;Not an boolean (true or false), &quot; + e); } input.close(); // wrapper class String input = new Scanner(System.in); System.out.print(&quot;Enter a String: &quot;); try { String sampleInputString = input.nextLine(); System.out.println(sampleInputString); } catch (Exception e) { // this may never happen System.out.println(&quot;Not an String, &quot; + e); } input.close(); } } ScanPrimitives.main(null); . Enter an integer: 123 Enter a double: 3.14159 Enter a boolean: true Enter a String: 🏀 Basketball . Output Primitive Data . public class PrimitiveDivision { public static void main(String[] args) { int i1 = 7, i2 = 2; System.out.println(&quot;Integer Division&quot;); System.out.println(&quot; tint output with concatenation: &quot; + i1 + &quot;/&quot; + i2 + &quot; = &quot; + i1/i2); System.out.println(String.format(&quot; tint output with format: %d/%d = %d&quot;,i1, i2, i1/i2)); System.out.printf(&quot; tint output with printf: %d/%d = %d n&quot;,i1, i2, i1/i2); double d1 = 7, d2 = 2; System.out.println(&quot;Double Division&quot;); System.out.println(&quot; tdouble output with concatenation: &quot; + d1 + &quot;/&quot; + d2 + &quot; = &quot; + d1/d2); System.out.println(String.format(&quot; tdouble output with format: %.2f/%.2f = %.2f&quot;,d1, d2, d1/d2)); System.out.printf(&quot; tdouble output with printf: %.2f/%.2f = %.2f n&quot;,d1, d2, d1/d2); System.out.println(&quot;Casting and Remainders&quot;); System.out.printf(&quot; tint cast to double on division: %d/%d = %.2f n&quot;,i1, i2, i1/(double)i2); System.out.println(&quot; tint using modulo for remainder: &quot; + i1 + &quot;/&quot; + i2 + &quot; = &quot; + i1/i2 + &quot; remainder &quot; + i1%i2); } } PrimitiveDivision.main(null); . Integer Division int output with concatenation: 7/2 = 3 int output with format: 7/2 = 3 int output with printf: 7/2 = 3 Double Division double output with concatenation: 7.0/2.0 = 3.5 double output with format: 7.00/2.00 = 3.50 double output with printf: 7.00/2.00 = 3.50 Casting and Remainders int cast to double on division: 7/2 = 3.50 int using modulo for remainder: 7/2 = 3 remainder 1 . Grade Calculator, putting Input and Output together . Primitive types rarley stand alone. This lab uses the primitive type double, but it also introduces the wrapper class Double. Also included is the most common Data Structure in Java ArrayList. . public class GradeCalculator { // introduction to Double wrapper class (object) ArrayList&lt;Double&gt; grades; // similar to Python list // constructor, initializes ArrayList and call enterGrades method public GradeCalculator() { this.grades = new ArrayList&lt;&gt;(); this.enterGrades(); } // double requires test for zero versus threshold, DO NOT compare to Zero private boolean isZero(double value){ double threshold = 0.001; return value &gt;= -threshold &amp;&amp; value &lt;= threshold; } // enterGrades input method using scanner private void enterGrades() { Scanner input; while (true) { input = new Scanner(System.in); System.out.print(&quot;Enter a double, 0 to exit: &quot;); try { double sampleInputDouble = input.nextDouble(); System.out.println(sampleInputDouble); if (isZero(sampleInputDouble)) break; // exit loop on isZero else this.grades.add(sampleInputDouble); // adding to object, ArrayList grades } catch (Exception e) { // if not a number System.out.println(&quot;Not an double (form like 9.99), &quot; + e); } input.close(); } } // average callculation public double average() { double total = 0; // running total for (double num : this.grades) { // enhanced for loop total += num; // shortcut add and assing operator } return (total / this.grades.size()); // double math, ArrayList grades object maintains its size } // static main method, used as driver and tester public static void main(String[] args) { GradeCalculator grades = new GradeCalculator(); // calls constructur, creates object, which calls enterGrades System.out.println(&quot;Average: &quot; + String.format(&quot;%.2f&quot;, grades.average())); // format used to standarize to two decimal points } } // IJava activation GradeCalculator.main(null); . Enter a double, 0 to exit: 95.3 Enter a double, 0 to exit: 87.3 Enter a double, 0 to exit: 91.6 Enter a double, 0 to exit: 77.7 Enter a double, 0 to exit: 0.0 Average: 87.98 . Hacks . Build your own Jupyter Notebook meeting these College Board and CTE competencies . Define in a Class the following data types Demonstrate use of Primitives: int, double, boole | Demonstrate use of Wrapper Class object: String | . | Describe in comments how each data type choice is appropriate to application | Perform arithmetic expressions in a program code | Determine what is result is in a variable as a result of an data type and expression (ie integer vs double) | Perform an arithmetic expressions that uses casting, add comments on how this produces desired result. | Perform compound assignment operator (ie +=), add comments to describe the result of operator | . Additional requirements . Multiple inputs and outputs are required | Jupyter NoteBook when committed to Fastpages must display Outputs | Building something that helps you study for another class is encouraged, here are some ideas: MPG, GPA, Celsius &lt;--&gt; Fahrenheit, The nth Fibonacci, GCD, Primes in range of numbers, Points per Game |",
            "url": "https://nighthawkcoders.github.io/APCSA/units/2022/06/14/primitives.html",
            "relUrl": "/units/2022/06/14/primitives.html",
            "date": " • Jun 14, 2022"
        }
        
    
  
    
        ,"post11": {
            "title": "Anatomy of Java",
            "content": "Hello, World! . These examples show the basic language structures and constructs of Java (aka anatomy). . Static example . The class HelloStatic contains the classic introduction to Java anatomy. The &quot;public static void main(String[] args)&quot;, or main method, is the default runtime method and has a very specific definition (signature). . // Define Static Method within a Class public class HelloStatic { // Java standard runtime entry point public static void main(String[] args) { System.out.println(&quot;Hello World!&quot;); } } // IJava only allows us to rexecute code without be wrapped in Class HelloStatic.main(null); // Class prefix allows reference of Static Method . Hello World! . Dynamic Example . This example starts to use Java in its natural manner, objects. The main method is now used as a driver/tester, by making an instance of the class. It creates an Object using the HelloObject() constructor. Also, this Class contains a getter method called getHello() which returns a String. . // Define Class with Constructor returning Object public class HelloObject { private String hello; public HelloObject() { // constructor hello = &quot;Hello, World!&quot;; } public String getHello() { return this.hello; // return String from object } public static void main(String[] args) { HelloObject ho = new HelloObject(); // Instance of Class (ho) is an Object via &quot;new HelloObject()&quot; System.out.println(ho.getHello()); // Object allows reference to public methods and data } } // IJava activation HelloObject.main(null); . Hello, World! . Dynamic Example with two constructors . This last example adds to the basics of the Java anatomy. The Class now contains two constructors and a setter to go with the getter. Also, observe the driver/tester now contains two objects that are intialized differently, 0 and 1 argument constructor. Look at the usage of the &quot;this&quot; prefix. The &quot;this&quot; keyword helps in clarification between instance and local variable. . // Define Class with Constructor returning Object public class HelloDynamic { private String hello; // constructor with no arguement signature public HelloDynamic() { this.setHello(&quot;Hello, World!&quot;); // using setter } // constructor with one argument signature public HelloDynamic(String hello) { this.setHello(hello); } // setter with void return public void setHello(String hello) { this.hello = hello; // instance variable on the left, local variable on the right } // getter with String return public String getHello() { return this.hello; } public static void main(String[] args) { HelloDynamic hd1 = new HelloDynamic(); // no argument constructor HelloDynamic hd2 = new HelloDynamic(&quot;Hello, Nighthawk Coding Society!&quot;); // one argument constructor System.out.println(hd1.getHello()); // accessing getter System.out.println(hd2.getHello()); } } // IJava activation HelloDynamic.main(null); . Hello, World! Hello, Nighthawk Coding Society! . Hacks . Build your own Jupyter Notebook meeting these College Board and CTE competencies . Explain Anatomy of a Class in comments of program (Key parts of the class) | Comment in code where there is a definition of a Class and an instance of a Class (ie object) | Comment in code where there are constructors and highlight the signature difference in the signature | Call non-static void methods with parameter (ie setters). | . Additional requirements . Go through progression of understanding Static Class usage versus Instance of a Class (Object) | Show how constructor(s) can be used to make the data in the Object dynamically change | Establish a vocabulary of terms and comments within Jupyter Notebook | Adapt solution to use a two argument constructors, provide constructor for 0, 1, 2 arguments. Here are some ideas for adjustments to give Class: Name and Age, Household name and number of people, Course name and number of Student |",
            "url": "https://nighthawkcoders.github.io/APCSA/units/2022/06/14/anatomy.html",
            "relUrl": "/units/2022/06/14/anatomy.html",
            "date": " • Jun 14, 2022"
        }
        
    
  
    
        ,"post12": {
            "title": "Tri3 Overview - 2022 Spring review",
            "content": "Time Box Tri 3 . Week Dates Stand Up Theme Test Prep Tech Talk Canvas . Finals | June 6 - 9 | Finals Week | none | none | none | . 11 | May 31 - June 3 | PBL Customer Project Due | N@tM Wed 6/1 6-7:30pm | none | Project Final Review | . 10 | May 23 - 27 | Final Project Dev 2 | none | Spring Boot Security and Notes and Uploads | none | . 9 | May 16 - 20 | Final Project Dev 1 | none | Spring Boot Security and Many-to-One Notes | none | . 8 | May 9 - 13 | AP Week 2, Final Project Review 2 | none | Many-to-Many Relations Data | PBL Sponsor Requirements Presentations | . 7 | May 2 - 6 | AP Week 1, Final Project Review 1 | CSA Exam May 4th | none | PBL Classroom Requirements Presentations | . 6 | April 25 - 29 | CSA College Board Prep Week 2 | Proctored MCQ Tue, FRQ Th | none | Study Week 2 | . 5 | April 18 - 22 | CSA College Board Prep Week 1 | Proctored MCQ Tue, FRQ Thu | none | Study Week 1 | . Spring Break | April 11 - 15 | none | none | none | none | . 4 | April 4 - 8 | Data Structures Final | none | Crossover Coding Tue, Wed | Individual Data Structures Final | . 3 | March 28 - April 1 | Sorts | none | TT3 Sorts and Analysis | Sorts and Analysis | . 2 | March 21 - 25 | Calculator | none | TT2 Calculator, Stacks, ArrayLists | Data Structures Challenge 2 | . 1 | March 14 - 18 | Custom Java and Linked Lists | none | TT1 Linked Lists | Data Structures Challenge 1 | .",
            "url": "https://nighthawkcoders.github.io/APCSA/tri3/2022/06/14/Tri3-overview.html",
            "relUrl": "/tri3/2022/06/14/Tri3-overview.html",
            "date": " • Jun 14, 2022"
        }
        
    
  
    
        ,"post13": {
            "title": "Curriculum Map David  2021 2022",
            "content": "PRIMITIVE TYPES . Variables and Data Types . Expressions and Assignment . Statements . Compound Assignment Operators . Casting and Ranges of Variables . Introduction to an Integrated Development Environment . Introduction to an IDE . | Assignments may differ at teacher discretion . Formative . Entry/Exit Slip Assessments . Participation . Discussions . Short Programming Exercises Quizzes CollegeBoard Unit 1 Progress Checks . Summative . Unit Test Project . | Call System class methods to generate output to the console. Create String literals. . Identify the most appropriate data type category for a articular specification. . Declare variables of the correct types to represent primitive data. . Evaluate arithmetic expressions in a program code. Evaluate what is stored in a variable as a result of an expression with an assignment statement . Evaluate what is stored in a variable as a result of an expression with an assignment statement. Evaluate arithmetic expressions that use casting. . Create java projects in an Integrated Development Environment (Eclipse, VS Studio) . SKILLS (Define at the bottom of the document): 1.A, 1.B, 2.B, 4.B, 5.A . | C4.1 . C4.3 . C4.4 . C4.6 . | LS (11-12.1 to 11-12.6) . RSIT (11-12.1 to 12.7) . WS (11 - 12.1 to 12.6, 12.8, 12.9) . A-CED (1-4) . A-REI (1-2) F-IF (1-10) . F-LE (5-6) . C (5) . G-CO (6-8, 12) G-GMD (1-3, 5) . G-GPE (4-7) . G-MG (1, 3) G-SRT (1-3) N-RN (1-2) . N-Q (1-3) N-CN (4-6) N-VM (6-12) S-IC(1-6) . S-ID(1-6) S-MD (1-7) . APPS (10, 15, 16) . | . USING OBJECTS | | | | | . Objects: Instances of Classes . Creating and Storing Objects . Calling methods . String Objects and Literals . String Methods . Wrapper Classes: Integer, Double . Using the Math Class . | Assignments may differ at teacher discretion . Formative . Entry/Exit Slip Assessments . Participation . Discussions . Programming Exercises Drawing Lab . Quizzes . CollegeBoard Unit 2 Progress Checks . Summative . Unit Test . | Explain the relationship between a class and an object. . Identify, using its signature, the correct constructor being called. Create objects by calling different constructors Define variables of the correct types to represent reference data. . Call non-static void methods with or without parameters. . Create String objects and use String class methods . Be familiar with the use of the Integer and Double wrapper classes. . Evaluate expressions that use the Math class methods. . Evaluate Boolean expressions that use relational operators in program code. . SKILLS: . 1.B, 1.C, 2.A, 2.C, 3.A, 5.A . | C4.7 . C4.8 . | LS (11-12.1 to 11-12.6) . RSIT (11-12.1 to 12.7) . WS (11 - 12.1 to 12.6, 12.8, 12.9) . A-CED (1-4) . A-REI (1-2) F-IF (1-10) . F-LE (5-6) . C (5) . G-CO (6-8, 12) G-GMD (1-3, 5) . G-GPE (4-7) . G-MG (1, 3) G-SRT (1-3) N-RN (1-2) . N-Q (1-3) N-CN (4-6) N-VM (6-12) S-IC(1-6) . S-ID(1-6) S-MD (1-7) . APPS (10, 15, 16) . | . BOOLEAN EXPRESSIONS AND IF STATEMENTS | | | | | . Boolean Expressions . if Statements and Control Flow . if-else Statements . else if Statements . Compound Boolean Expressions . Equivalent Boolean Expressions . Comparing Objects . Introduction to Graphic-User-Interface in java . | Assignments may differ at teacher discretion . Formative . Short Debugging Exercises Programming Exercises . Introduction to GitHub for Eclipse . Quizzes . CollegeBoard Unit 3 Progress Checks . Summative . Pong - First GUI-Based Program . Unit Test . | Represent branching logical processes by using conditional statements. . Compare and contrast equivalent Boolean expressions. . Compare object references using Boolean expressions in program code. . Follow starter code for a GUI-based java project . Write if-statements for keyboard input of a java program . Use java drawing methods to draw shapes in java . Complete a java program that uses a GUI for the simple game of Pong . SKILLS: . 2.A, 2.B, 3.A, 3.C, 4.A, 4.C . | C4.9 | LS (11-12.1 to 11-12.6) . RSIT (11-12.1 to 12.7) . WS (11 - 12.1 to 12.6, 12.8, 12.9) . A-CED (1-4) . A-REI (1-2) F-IF (1-10) . F-LE (5-6) . C (5) . G-CO (6-8, 12) G-GMD (1-3, 5) . G-GPE (4-7) . G-MG (1, 3) G-SRT (1-3) N-RN (1-2) . N-Q (1-3) N-CN (4-6) N-VM (6-12) S-IC(1-6) . S-ID(1-6) S-MD (1-7) . APPS (10, 15, 16) . | . ITERATION | | | | | . while Loops . for Loops . Developing Algorithms for Strings . Nested Iteration . Code Analysis . | Assignments may differ at teacher discretion . Formative . Entry/Exit Slip Assessments . Participation . Discussions Short Debugging Exercises Programming Exercises . Quizzes . CollegeBoard Unit 4 Progress Checks . Summative . Unit Test . | Represent iterative processes using a while or for loop. . Identify, modify, and develop standard String-related algorithms . Represent nested iterative processes Compute statement execution counts and informal run-time comparison of iterative statements. . SKILLS: . 1.B, 2.B, 2.D, 3.C, 4.C, 5.C . | C4.9 | LS (11-12.1 to 11-12.6) . RSIT (11-12.1 to 12.7) . WS (11 - 12.1 to 12.6, 12.8, 12.9) . A-CED (1-4) . A-REI (1-2) F-IF (1-10) . F-LE (5-6) . C (5) . G-CO (6-8, 12) G-GMD (1-3, 5) . G-GPE (4-7) . G-MG (1, 3) G-SRT (1-3) N-RN (1-2) . N-Q (1-3) N-CN (4-6) N-VM (6-12) S-IC(1-6) . S-ID(1-6) S-MD (1-7) . APPS (10, 15, 16) . | . WRITING CLASSES | | | | | . Anatomy of a Class . Constructors . Code Comments . Accessor/Getter Methods . Mutator/Setter Methods . Writing Methods . Static Variables and Methods . Scope and Access . this Keyword . | Assignments may differ at teacher discretion . Formative . Entry/Exit Slip Assessments . Participation . Discussions . Short Debugging Exercises Programming Exercises Quizzes . Introduction to AP-Level FRQs Style 1 - Methods and Control Structures Introduction to AP-Level FRQs Style 2 - Classes . CollegeBoard Unit 5 Progress Checks . Summative . Unit Test . DuckHunt Project . | Designate access and visibility constraints to classes, data, constructors, and methods. . Designate private visibility of instance variables to encapsulate the attributes of an object. . Define instance variables for the attributes to be initialized through the constructors of a class. . Describe the functionality and use of program code through comments. . Define behaviors of an object through non-void methods without parameters written in a class. . Define behaviors of a class through static methods. . Define the static variables that belong to the class. . Explain where variables can be used in the program code. . Evaluate object reference expressions that use the keyword this . SKILLS: . 1.A,1.B, 1.C, 2.C, 3.B, 4.B, 5.A, 5.B, 5.D . | C4.5 . C4.8 . C4.11 . | LS (11-12.1 to 11-12.6) . RSIT (11-12.1 to 12.7) . WS (11 - 12.1 to 12.6, 12.8, 12.9) . A-CED (1-4) . A-REI (1-2) F-IF (1-10) . F-LE (5-6) . C (5) . G-CO (6-8, 12) G-GMD (1-3, 5) . G-GPE (4-7) . G-MG (1, 3) G-SRT (1-3) N-RN (1-2) . N-Q (1-3) N-CN (4-6) N-VM (6-12) S-IC(1-6) . S-ID(1-6) S-MD (1-7) . APPS (10, 15, 16) . | . ARRAY | | | | | . Creation and Access . Traversing Arrays . Enhanced for Loops for Arrays . Reading, Modifying, and Developing Algorithms Using Arrays . | Assignments may differ at teacher discretion . Formative . Entry/Exit Slip Assessments . Participation . Discussions . Debugging and Programming Exercises . Quizzes . CollegeBoard Unit 6 Progress Checks . Summative . Frogger / Agar.io Project . Unit Test . | Represent collections of related primitive or object reference data using one dimensional (1D) array objects. . Traverse the elements in a 1D array using a while, for, or enhanced for loop. . Identify, modify and develop array traversals algorithms. . Integrate 1D Arrays, Loops, and Objects into a GUI-Based java program. . SKILLS: . 1.C, 2.B, 4.B, 4.C, 5.D . | C4.7 | LS (11-12.1 to 11-12.6) . RSIT (11-12.1 to 12.7) . WS (11 - 12.1 to 12.6, 12.8, 12.9) . A-CED (1-4) . A-REI (1-2) F-IF (1-10) . F-LE (5-6) . C (5) . G-CO (6-8, 12) G-GMD (1-3, 5) . G-GPE (4-7) . G-MG (1, 3) G-SRT (1-3) N-RN (1-2) . N-Q (1-3) N-CN (4-6) N-VM (6-12) S-IC(1-6) . S-ID(1-6) S-MD (1-7) . APPS (10, 15, 16) . | . ARRAYLIST | | | | | . Introduction to ArrayList . ArrayList Methods . Traversing ArrayLists . Reading, Modifying and Developing Algorithms Using ArrayList . Searching - Sequential . Sorting: Insertion, Selection . | Assignments may differ at teacher discretion . Formative . Entry/Exit Slip Assessments . Participation . Discussions Debugging &amp; Programming Exercises FRQ Practice (AP Prep) . Quizzes . Infection Simulation / Agar.io Clone Re-visited with ArrayList and dynamically adding objects into simulation . CollegeBoard Unit 7 Progress Checks . Summative . Unit Test . | Represent collections of related object reference data using ArrayList objects. . Traverse ArrayList objects using while, for, and enhanced loops. . Identify, modify and develop algorithms involving traversals Apply sequential/linear search algorithms to search for specific information in an array or ArrayList of . objects. . Apply selection sort and insertion sort algorithms to sort the elements of an array or ArrayList objects. . Compute statement execution counts and informal run-time comparison of sorting algorithms. . SKILLS: . 1.B, 2.C, 2.D, 5.C . | C4.7 . C4.10 . | LS (11-12.1 to 11-12.6) . RSIT (11-12.1 to 12.7) . WS (11 - 12.1 to 12.6, 12.8, 12.9) . A-CED (1-4) . A-REI (1-2) F-IF (1-10) . F-LE (5-6) . C (5) . G-CO (6-8, 12) G-GMD (1-3, 5) . G-GPE (4-7) . G-MG (1, 3) G-SRT (1-3) N-RN (1-2) . N-Q (1-3) N-CN (4-6) N-VM (6-12) S-IC(1-6) . S-ID(1-6) S-MD (1-7) . APPS (10, 15, 16) . | . 2D ARRAY | | | | | . Creation and Access . Traversing 2D Arrays . Reading, Modifying and Developing Algorithms using 2D Arrays . | Assignments may differ at teacher discretion . Formative . Entry/Exit Slip Assessments . Participation . Discussions Debugging &amp; Programming Exercises . MagicSquares . FRQ Practice (AP Prep) . Quizzes . CollegeBoard Unit 8 Progress Checks Picture Lab / 2048 . Summative . Unit Test . | Represent collections of related primitive or object reference data using two-dimensional (2D) array objects. . Traverse 2D array objects using while, for, or enhanced for loops. . Identify or modify algorithms requiring 2D array traversals Write program code to create, traverse, and manipulate elements in 2D array objects. . SKILLS: . 1.B, 1.C, 2.B, 2.D, 4.A, . | C4.7 | LS (11-12.1 to 11-12.6) . RSIT (11-12.1 to 12.7) . WS (11 - 12.1 to 12.6, 12.8, 12.9) . A-CED (1-4) . A-REI (1-2) F-IF (1-10) . F-LE (5-6) . C (5) . G-CO (6-8, 12) G-GMD (1-3, 5) . G-GPE (4-7) . G-MG (1, 3) G-SRT (1-3) N-RN (1-2) . N-Q (1-3) N-CN (4-6) N-VM (6-12) S-IC(1-6) . S-ID(1-6) S-MD (1-7) . APPS (10, 15, 16) . | . INHERITANCE | | | | | . Creating Superclasses and Subclasses . Writing Constructors for Subclasses . | Formative . Entry/Exit Slip Assessments . Participation . Discussions . Programming Exercises . Elevens Lab . Quizzes . CollegeBoard Unit 9 Progress Checks . Summative . Unit Test . | Create an inheritance relationship from a subclass to the superclass . Define reference variables of a superclass to be assigned to an object of a subclass in the same hierarchy. . Call methods in an inheritance relationship. Call Object class methods through inheritance. . SKILLS: . 1.A, 1.C, 3.A, 3.B, 5.A, 5.D . | C4.5 . C4.8 . | LS (11-12.1 to 11-12.6) . RSIT (11-12.1 to 12.7) . WS (11 - 12.1 to 12.6, 12.8, 12.9) . A-CED (1-4) . A-REI (1-2) F-IF (1-10) . F-LE (5-6) . C (5) . G-CO (6-8, 12) G-GMD (1-3, 5) . G-GPE (4-7) . G-MG (1, 3) G-SRT (1-3) N-RN (1-2) . N-Q (1-3) N-CN (4-6) N-VM (6-12) S-IC(1-6) . S-ID(1-6) S-MD (1-7) . APPS (10, 15, 16) . | . RECURSION | | | | | . Determining the result of recursive . methods . Writing simple recursive methods: . Determining base cases and recursive . calls . Recursive Traversals on ArrayLists . and Strings . Recursive Searching Algorithm: Binary Search . Recursive Sorting Algorithm: Merge Sort . | Assignments may differ at teacher discretion . Formative . Programming Exercises . Fractal Drawing in Java - Recursvely Drawing Shapes Recursive Method Tracing Exercises . Quizzes . CollegeBoard Unit 10 Progress Checks . Summative . Unit Test Group Project . | Apply recursive search algorithms to information in String, 1D array, or ArrayList objects. Apply recursive algorithms to sort elements of an array or ArrayList objects. Determine the result of executing recursive methods. . SKILLS: . 1.B, 2.B, 2.D, 5.A, . | C4.9 . C4.10 . C5.3 . C5.6 . | LS (11-12.1 to 11-12.6) . RSIT (11-12.1 to 12.7) . WS (11 - 12.1 to 12.6, 12.8, 12.9) . A-CED (1-4) . A-REI (1-2) F-IF (1-10) . F-LE (5-6) . C (5) . G-CO (6-8, 12) G-GMD (1-3, 5) . G-GPE (4-7) . G-MG (1, 3) G-SRT (1-3) N-RN (1-2) . N-Q (1-3) N-CN (4-6) N-VM (6-12) S-IC(1-6) S-MD (1-7) . APPS (10, 15, 16) . | . ETHICAL COMPUTING | | | | | . Ethical and Social Implications of . Computing Systems . Ethical Issues Around Data Collection . | Formative . Discussions . | Explain the risks to privacy from collecting and storing personal data on computer systems. | C8.3 . C8.6 . C8.8 . C10.1 . | LS (11-12.1 to 11-12.6) . A-CED (1-4) . G-GPE (4-7) . G-MG (1, 3) . N-Q (1-3) N-CN (4-6) S-IC(1-6) S-MD (1-7) . | . SKILLS . 1.A  Determine an appropriate program design to solve a problem or accomplish a task. . 1.B  Determine code that would be used to complete code segments. . 1.C  Determine code that would be used to interact with completed program code. . | 2.A  Apply the meaning of specific operators. . 2.B  Determine the result or output based on statement execution order in a code segment without method calls (other than output). . 2.C  Determine the result or output based on the statement execution order in a code segment containing method calls. . 2.D  Determine the number of times a code segment will execute. . | 3.A  Write program code to create objects of a class and call methods. . 3.B  Write program code to define a new type by creating a class. . 3.C  Write program code to satisfy method specifications using expressions, conditional statements, and iterative statements. . 3.D  Write program code to create, traverse, and manipulate elements in a 1D array or ArrayList objects. . 3.E  Write program code to create, traverse, and manipulate elements in 2D array objects. . | 4.A Use test cases to find errors or validate results. . 4.B  Identify errors in program code. . 4.C  Determine if two or more code segments yield equivalent results . | 5.A  Describe the behavior of a given segment of program code. . 5.B  Explain why a code segment will not compile or work as intended. . 5.C  Explain how the result of program code changes, given a change to the initial code. . 5.D  Describe the initial conditions that must be met for a program segment to work as intended or described. . | .",
            "url": "https://nighthawkcoders.github.io/APCSA/2022/06/14/Curriculum-Map-David-2021-2022.html",
            "relUrl": "/2022/06/14/Curriculum-Map-David-2021-2022.html",
            "date": " • Jun 14, 2022"
        }
        
    
  

  
  
      ,"page0": {
          "title": "Frontend",
          "content": "| Overview | Binary | Graph | Life | Snake | . Frontend Overview .",
          "url": "https://nighthawkcoders.github.io/APCSA/frontend/overview",
          "relUrl": "/frontend/overview",
          "date": ""
      }
      
  

  
      ,"page1": {
          "title": "Data",
          "content": "| Overview | Jokes API | Covid19 RapidAPI | Database API | . Data Overview .",
          "url": "https://nighthawkcoders.github.io/APCSA/data/overview",
          "relUrl": "/data/overview",
          "date": ""
      }
      
  

  

  

  
      ,"page4": {
          "title": "About Us",
          "content": "Name ID Age .",
          "url": "https://nighthawkcoders.github.io/APCSA/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
      ,"page6": {
          "title": "",
          "content": "| Overview | Binary | Graph | Life | Snake | . Binary Math with Conversions . Plus Binary Octal Hexadecimal Decimal Minus . +1 | 00000000 | 0 | 0 | 0 | -1 | . Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | . | | | | | | | | .",
          "url": "https://nighthawkcoders.github.io/APCSA/frontend/binary",
          "relUrl": "/frontend/binary",
          "date": ""
      }
      
  

  
      ,"page7": {
          "title": "",
          "content": "| Overview | Jokes API | Covid19 RapidAPI | Database API | . Covid19 RapidAPI .",
          "url": "https://nighthawkcoders.github.io/APCSA/data/covid",
          "relUrl": "/data/covid",
          "date": ""
      }
      
  

  
      ,"page8": {
          "title": "",
          "content": "| Overview | Jokes API | Covid19 RapidAPI | Database API | . Database API .",
          "url": "https://nighthawkcoders.github.io/APCSA/data/database",
          "relUrl": "/data/database",
          "date": ""
      }
      
  

  
      ,"page9": {
          "title": "",
          "content": "| Overview | Binary | Graph | Life | Snake | . Graphing grid .",
          "url": "https://nighthawkcoders.github.io/APCSA/frontend/graph",
          "relUrl": "/frontend/graph",
          "date": ""
      }
      
  

  

  
      ,"page11": {
          "title": "",
          "content": "| Overview | Jokes API | Covid19 RapidAPI | Database API | . Joke HaHa Boohoo .",
          "url": "https://nighthawkcoders.github.io/APCSA/data/jokes",
          "relUrl": "/data/jokes",
          "date": ""
      }
      
  

  
      ,"page12": {
          "title": "",
          "content": "| Overview | Binary | Graph | Life | Snake | . Remix of Game of Life . start step",
          "url": "https://nighthawkcoders.github.io/APCSA/frontend/life",
          "relUrl": "/frontend/life",
          "date": ""
      }
      
  

  
  

  
  

  
      ,"page15": {
          "title": "",
          "content": "{% include nav_frontend.html %} . Snake score: 0 . . Welcome to Snake, press space to begin . new game settings Game Over, press space to try again . new game settings Settings Screen, press space to go back to playing . new game Speed: Slow Normal Fast . Wall: On Off .",
          "url": "https://nighthawkcoders.github.io/APCSA/frontend/snake",
          "relUrl": "/frontend/snake",
          "date": ""
      }
      
  

  
  

  
  

  
  

  
      ,"page19": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://nighthawkcoders.github.io/APCSA/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}