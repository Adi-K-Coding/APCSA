{
  
    
        "post0": {
            "title": "Tri2 Overview - 2021-2022 Winter review",
            "content": "Time Box Tri 2 . Week Stand Up Theme Test Prep Tech Talk Canvas . 11 | Finals Week | none | N@tM | PBL Final | . 10 | Surprise Test and Tri 3 Intro | none | TT10 | Final MCQ Test | . 9 | Student Tech Talks | none | TT9.1Search, TT9.2Sassy | PBL Part 1 | . 8 | Data Ops, Linked List of Objects | FRQ9 Books, FRQ10 GCF | TT8 | Pair/Trio Showing 2 | . 7 | Data Ops, Sorts | FRQ7 Users, FRQ8 Plots | TT7 | Pair/Trio Showing 1 | . 6 | Midterm, FRQs, and Ketchup | FRQ6, Enhanced for loop | TT6 | Mid Term FRQ and Vocab | . 5 | Data Ops, Generics | FRQ5, Invitation | TT5 | PBL Showing | . 4 | StringOps, Jekyll | FRQ4, Streak | TT4 | 3, 4, 5 | . 3 | TO DB Training | FRQ3, RSVP | TT3 | WIP Review | . 2 | Certbot, 1to1 | FRQ2, Light Sequence | TT2.1 TT2.2 | Home Pages | . 1 | SCCS, Async | None | TT1.1, TT1.2 | Project Approval | .",
            "url": "https://nighthawkcoders.github.io/APCSA/tri2/2022/06/15/Tri2-overview.html",
            "relUrl": "/tri2/2022/06/15/Tri2-overview.html",
            "date": " ‚Ä¢ Jun 15, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Tech Talk 1.0 - Introduction, PBL, and Tools",
            "content": "AP CSA COURSE OUTLINE . Methodology. Project Based Learning (PBL) | Guideline. The 10 Units of AP Computer Science A | Key Learnings for 2022-2023 Collaboratively Build, Deploy and Host Web Pages | Programming, Algorithms, Databases, and APIs | Team and Individual Project will highlight all 10 units, either academically or in interest fashion | . | Establish ‚ÄúReal World‚Äù Scrum Team projects Preference is to establish projects with a Customer/Sponsor | Projects will be tracked using GitHub README, Issues and Projects tools | . | Create ‚ÄúGitHub Pages‚Äù Individual postings and notebooks Build individual GitHub Pages Web Site to track Notes and Learnings | . | AP testing in May | . Week 0 . Assignments mostly Due Monday at the start of class (see canvas) | Mostly live and self grading reviews conducted Monday in class | 5 point seed (highly engaged +, distracted -) | Approximately 100 points per trimester | . ‚ÄúReal World‚Äù Projects . You, your pair, and your Scrum Team will collaboratively Build, deploy and host Web Site. This Web project contains Technicals learned throughout the Trimester. This will be done in increments. Each Monday assignment will focus on setting up Tools and Methods in becoming a Nighthawk Coder. . Feature Considerations for Project One unique idea, aka something useful to school | Ability to show case individual PBL, Test Prep work and labs | A page that highlights YOU and your Technical Capbilities | Managing Technical Requirement for Project | Use ‚ÄúJava Classes‚Äù as well as Units 1-10. | Build frontend using ‚ÄúThymeleaf‚Äù or ‚ÄúReact‚Äù with data coming from ‚ÄúJava Spring‚Äù. | PBL requirements and accomplishments are described through each week/sprint. | . | . Week 0 Learning Outcome . Getting adapted to the Agile development methodologies used in Computer Science. Additionally, getting introduced to the Tools used in building a Java/Spring Web Server and managing a personal Notebook using GitHub Pages. . Establish Comp Sci and PBL attitude . Attitude. An Agile mindset is not knowing the answer, making lots of mistakes and performing iteration. A successful grade is dependent on making mistakes, research, and iteration. | Suggestion. Please bring a personal laptop to class daily. The Internet and AP Classroom web site will be considered text book. | Requirements. Everything will be distributed electronically. All code you develop will be delivered to the Cloud. | This class has a NO PAPER policy, when the Teacher sees paper the student will be considered to be distracted (-), Slash/Slash/Slash | . Sprint 0 / Week 0 . Wednesday - Pick pair share partner, Pick crossover pair, Establish team of four. Based off of modulo mathematics (remainder) there can only be 3 teams of 5 maximum. Spend some time talking and getting to know each other. Teacher will visit teams as time allows. Thursday - Start bringing your laptop. Tech Talk 0. Start setting up tools and code for your 1st Web Site. Friday - Perform as many 0.* Tech Talks as possible. . Tech Talk 0 - Tools and Equipment . Developer Operations (DevOps) is dependent . Java is the key language you will be using in this class. HTML, CSS, JavaScript are the key supporting technicals you will be using to enhance your learning of Java. | VS Code is the code editor we will be using in this class. VS Code is more than and editor, it is called and IDE (Interactive Development Environment. | GitHub is where we store and share code in the cloud, think of Google Docs but for Code. | GitHub Pages will be used to host your personal notes and experiences. | Jupyter Notebooks will be used in conjunction with GitHub Pages to store Technical Notes. | AWS Cloud Commputing and Servers will be used to Deploy and Support projects. | Slack is the tool will use for messaging, we have been averaging 35,000 message per class. | . Equipment needed and accounts to maximize class . A laptop, that you bring to class every day with the Development Tools installed on it. | GitHub Account | Slack account | AWS Account that will be provided by Teacher | . Installation guides (Allie to add stuff to complement this outline) . - VS Code - JRE and JDK installations - Create initial project(s) from GitHub - Play your project - In Chrome or browser, run localhost:8080 - Review GitHub concepts, watch video by Michael Hayes. - Install Slack app .",
            "url": "https://nighthawkcoders.github.io/APCSA/tri1/devops/2022/06/15/Tri1-introduction.html",
            "relUrl": "/tri1/devops/2022/06/15/Tri1-introduction.html",
            "date": " ‚Ä¢ Jun 15, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Tech Talk 1.1.1 - Primitive Types",
            "content": "College Board Summary . College Board focus is on primitive types of int, double, and boolean. In unit1, String is mentioned, but it is technically a Wrapper Class. The primitive type associated with String is the single characther char. String is an array of char&#39;s and the uppercase S in String means it is a Class. . Input Primitive data . // java style to import library import java.util.Scanner; // class must alway have 1st letter as uppercase, CamelCase is Java Class convention public class ScanPrimitives { public static void main(String[] args) { Scanner input; // primitive int input = new Scanner(System.in); System.out.print(&quot;Enter an integer: &quot;); try { int sampleInputInt = input.nextInt(); System.out.println(sampleInputInt); } catch (Exception e) { // if not an integer System.out.println(&quot;Not an integer (form like 159), &quot; + e); } input.close(); // primitive double input = new Scanner(System.in); System.out.print(&quot;Enter a double: &quot;); try { double sampleInputDouble = input.nextDouble(); System.out.println(sampleInputDouble); } catch (Exception e) { // if not a number System.out.println(&quot;Not an double (form like 9.99), &quot; + e); } input.close(); // primitive boolean input = new Scanner(System.in); System.out.print(&quot;Enter a boolean: &quot;); try { boolean sampleInputBoolean = input.nextBoolean(); System.out.println(sampleInputBoolean); } catch (Exception e) { // if not true or false System.out.println(&quot;Not an boolean (true or false), &quot; + e); } input.close(); // wrapper class String input = new Scanner(System.in); System.out.print(&quot;Enter a String: &quot;); try { String sampleInputString = input.nextLine(); System.out.println(sampleInputString); } catch (Exception e) { // this may never happen System.out.println(&quot;Not an String, &quot; + e); } input.close(); } } ScanPrimitives.main(null); . Enter an integer: 123 Enter a double: 3.14159 Enter a boolean: true Enter a String: üèÄ Basketball . Output Primitive Data . public class PrimitiveDivision { public static void main(String[] args) { int i1 = 7, i2 = 2; System.out.println(&quot;Integer Division&quot;); System.out.println(&quot; tint output with concatenation: &quot; + i1 + &quot;/&quot; + i2 + &quot; = &quot; + i1/i2); System.out.println(String.format(&quot; tint output with format: %d/%d = %d&quot;,i1, i2, i1/i2)); System.out.printf(&quot; tint output with printf: %d/%d = %d n&quot;,i1, i2, i1/i2); double d1 = 7, d2 = 2; System.out.println(&quot;Double Division&quot;); System.out.println(&quot; tdouble output with concatenation: &quot; + d1 + &quot;/&quot; + d2 + &quot; = &quot; + d1/d2); System.out.println(String.format(&quot; tdouble output with format: %.2f/%.2f = %.2f&quot;,d1, d2, d1/d2)); System.out.printf(&quot; tdouble output with printf: %.2f/%.2f = %.2f n&quot;,d1, d2, d1/d2); System.out.println(&quot;Casting and Remainders&quot;); System.out.printf(&quot; tint cast to double on division: %d/%d = %.2f n&quot;,i1, i2, i1/(double)i2); System.out.println(&quot; tint using modulo for remainder: &quot; + i1 + &quot;/&quot; + i2 + &quot; = &quot; + i1/i2 + &quot; remainder &quot; + i1%i2); } } PrimitiveDivision.main(null); . Integer Division int output with concatenation: 7/2 = 3 int output with format: 7/2 = 3 int output with printf: 7/2 = 3 Double Division double output with concatenation: 7.0/2.0 = 3.5 double output with format: 7.00/2.00 = 3.50 double output with printf: 7.00/2.00 = 3.50 Casting and Remainders int cast to double on division: 7/2 = 3.50 int using modulo for remainder: 7/2 = 3 remainder 1 . Grade Calculator, putting Input and Output together . Primitive types rarley stand alone. This lab uses the primitive type double, but it also introduces the wrapper class Double. Also included is the most common Data Structure in Java ArrayList. . public class GradeCalculator { // introduction to Double wrapper class (object) ArrayList&lt;Double&gt; grades; // similar to Python list // constructor, initializes ArrayList and call enterGrades method public GradeCalculator() { this.grades = new ArrayList&lt;&gt;(); this.enterGrades(); } // double requires test for zero versus threshold, DO NOT compare to Zero private boolean isZero(double value){ double threshold = 0.001; return value &gt;= -threshold &amp;&amp; value &lt;= threshold; } // enterGrades input method using scanner private void enterGrades() { Scanner input; while (true) { input = new Scanner(System.in); System.out.print(&quot;Enter a double, 0 to exit: &quot;); try { double sampleInputDouble = input.nextDouble(); System.out.println(sampleInputDouble); if (isZero(sampleInputDouble)) break; // exit loop on isZero else this.grades.add(sampleInputDouble); // adding to object, ArrayList grades } catch (Exception e) { // if not a number System.out.println(&quot;Not an double (form like 9.99), &quot; + e); } input.close(); } } // average callculation public double average() { double total = 0; // running total for (double num : this.grades) { // enhanced for loop total += num; // shortcut add and assing operator } return (total / this.grades.size()); // double math, ArrayList grades object maintains its size } // static main method, used as driver and tester public static void main(String[] args) { GradeCalculator grades = new GradeCalculator(); // calls constructur, creates object, which calls enterGrades System.out.println(&quot;Average: &quot; + String.format(&quot;%.2f&quot;, grades.average())); // format used to standarize to two decimal points } } // IJava activation GradeCalculator.main(null); . Enter a double, 0 to exit: 95.3 Enter a double, 0 to exit: 87.3 Enter a double, 0 to exit: 91.6 Enter a double, 0 to exit: 77.7 Enter a double, 0 to exit: 0.0 Average: 87.98 . Hacks . Build your own Jupyter Notebook. . Multiple inputs and outputs are required | Calculations are required | Jupyter NoteBook with Outputs are required | Calculator ideas: MPG, GPA, C &lt;--&gt; F, nth Fibonacci, GCD, Primes in range of numbers, Points per Game, Building something that helps you study for another class is encouraged. .",
            "url": "https://nighthawkcoders.github.io/APCSA/unit01/2022/06/14/primitive.html",
            "relUrl": "/unit01/2022/06/14/primitive.html",
            "date": " ‚Ä¢ Jun 14, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Tech Talk 1.0.1 - Anatomy of Java",
            "content": "Hello, World! . These examples show the basic language structures and constructs of Java (aka anatomy). . Static example . The class HelloStatic contains the classic introduction to Java anatomy. The &quot;public static void main(String[] args)&quot;, or main method, is the default runtime method and has a very specific definition (signature). . // Define Static Method within a Class public class HelloStatic { // Java standard runtime entry point public static void main(String[] args) { System.out.println(&quot;Hello World!&quot;); } } // IJava only allows us to rexecute code without be wrapped in Class HelloStatic.main(null); // Class prefix allows reference of Static Method . Hello World! . Dynamic Example . This example starts to use Java in its natural manner, objects. The main method is now used as a driver/tester, by making an instance of the class. It creates an Object using the HelloObject() constructor. Also, this Class contains a getter method called getHello() which returns a String. . // Define Class with Constructor returning Object public class HelloObject { private String hello; public HelloObject() { // constructor hello = &quot;Hello, World!&quot;; } public String getHello() { return this.hello; // return String from object } public static void main(String[] args) { HelloObject ho = new HelloObject(); // Instance of Class (ho) is an Object via &quot;new HelloObject()&quot; System.out.println(ho.getHello()); // Object allows reference to public methods and data } } // IJava activation HelloObject.main(null); . Hello, World! . Dynamic Example with two constructors . This last example adds to the basics of the Java anatomy. The Class now contains two constructors and a setter to go with the getter. Also, observe the driver/tester now contains two objects that are intialized differently, 0 and 1 argument constructor. Look at the usage of the &quot;this&quot; prefix. The &quot;this&quot; keyword helps in clarification between instance and local variable. . // Define Class with Constructor returning Object public class HelloDynamic { private String hello; // constructor with no arguement signature public HelloDynamic() { this.setHello(&quot;Hello, World!&quot;); // using setter } // constructor with one argument signature public HelloDynamic(String hello) { this.setHello(hello); } // setter with void return public void setHello(String hello) { this.hello = hello; // instance variable on the left, local variable on the right } // getter with String return public String getHello() { return this.hello; } public static void main(String[] args) { HelloDynamic hd1 = new HelloDynamic(); // no argument constructor HelloDynamic hd2 = new HelloDynamic(&quot;Hello, Nighthawk Coding Society!&quot;); // one argument constructor System.out.println(hd1.getHello()); // accessing getter System.out.println(hd2.getHello()); } } // IJava activation HelloDynamic.main(null); . Hello, World! Hello, Nighthawk Coding Society! . Hacks . Build your own Jupyter Notebook. . Go through progression of Static, Object, Dynamic | Establish a vocabulary of terms within each Notebook progression | Adapt your final solution to use a two argument constructors, provide constructor for 0, 1, 2 arguments. | Ideas: Name and Age, Household name and number of people, Class name and number of Student .",
            "url": "https://nighthawkcoders.github.io/APCSA/unit01/2022/06/14/anatomy.html",
            "relUrl": "/unit01/2022/06/14/anatomy.html",
            "date": " ‚Ä¢ Jun 14, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "Tri3 Overview - 2022 Spring review",
            "content": "Time Box Tri 3 . Week Dates Stand Up Theme Test Prep Tech Talk Canvas . Finals | June 6 - 9 | Finals Week | none | none | none | . 11 | May 31 - June 3 | PBL Customer Project Due | N@tM Wed 6/1 6-7:30pm | none | Project Final Review | . 10 | May 23 - 27 | Final Project Dev 2 | none | Spring Boot Security and Notes and Uploads | none | . 9 | May 16 - 20 | Final Project Dev 1 | none | Spring Boot Security and Many-to-One Notes | none | . 8 | May 9 - 13 | AP Week 2, Final Project Review 2 | none | Many-to-Many Relations Data | PBL Sponsor Requirements Presentations | . 7 | May 2 - 6 | AP Week 1, Final Project Review 1 | CSA Exam May 4th | none | PBL Classroom Requirements Presentations | . 6 | April 25 - 29 | CSA College Board Prep Week 2 | Proctored MCQ Tue, FRQ Th | none | Study Week 2 | . 5 | April 18 - 22 | CSA College Board Prep Week 1 | Proctored MCQ Tue, FRQ Thu | none | Study Week 1 | . Spring Break | April 11 - 15 | none | none | none | none | . 4 | April 4 - 8 | Data Structures Final | none | Crossover Coding Tue, Wed | Individual Data Structures Final | . 3 | March 28 - April 1 | Sorts | none | TT3 Sorts and Analysis | Sorts and Analysis | . 2 | March 21 - 25 | Calculator | none | TT2 Calculator, Stacks, ArrayLists | Data Structures Challenge 2 | . 1 | March 14 - 18 | Custom Java and Linked Lists | none | TT1 Linked Lists | Data Structures Challenge 1 | .",
            "url": "https://nighthawkcoders.github.io/APCSA/tri3/2022/06/14/Tri3-overview.html",
            "relUrl": "/tri3/2022/06/14/Tri3-overview.html",
            "date": " ‚Ä¢ Jun 14, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "Curriculum Map David  2021 2022",
            "content": "PRIMITIVE TYPES . Variables and Data Types . Expressions and Assignment . Statements . Compound Assignment Operators . Casting and Ranges of Variables . Introduction to an Integrated Development Environment . Introduction to an IDE . | Assignments may differ at teacher discretion . Formative . Entry/Exit Slip Assessments . Participation . Discussions . Short Programming Exercises Quizzes CollegeBoard Unit 1 Progress Checks . Summative . Unit Test Project . | Call System class methods to generate output to the console. Create String literals. . Identify the most appropriate data type category for a articular specification. . Declare variables of the correct types to represent primitive data. . Evaluate arithmetic expressions in a program code. Evaluate what is stored in a variable as a result of an expression with an assignment statement . Evaluate what is stored in a variable as a result of an expression with an assignment statement. Evaluate arithmetic expressions that use casting. . Create java projects in an Integrated Development Environment (Eclipse, VS Studio) . SKILLS (Define at the bottom of the document): 1.A, 1.B, 2.B, 4.B, 5.A . | C4.1 . C4.3 . C4.4 . C4.6 . | LS (11-12.1 to 11-12.6) . RSIT (11-12.1 to 12.7) . WS (11 - 12.1 to 12.6, 12.8, 12.9) . A-CED (1-4) . A-REI (1-2) F-IF (1-10) . F-LE (5-6) . C (5) . G-CO (6-8, 12) G-GMD (1-3, 5) . G-GPE (4-7) . G-MG (1, 3) G-SRT (1-3) N-RN (1-2) . N-Q (1-3) N-CN (4-6) N-VM (6-12) S-IC(1-6) . S-ID(1-6) S-MD (1-7) . APPS (10, 15, 16) . | . USING OBJECTS | | | | | . Objects: Instances of Classes . Creating and Storing Objects . Calling methods . String Objects and Literals . String Methods . Wrapper Classes: Integer, Double . Using the Math Class . | Assignments may differ at teacher discretion . Formative . Entry/Exit Slip Assessments . Participation . Discussions . Programming Exercises Drawing Lab . Quizzes . CollegeBoard Unit 2 Progress Checks . Summative . Unit Test . | Explain the relationship between a class and an object. . Identify, using its signature, the correct constructor being called. Create objects by calling different constructors Define variables of the correct types to represent reference data. . Call non-static void methods with or without parameters. . Create String objects and use String class methods . Be familiar with the use of the Integer and Double wrapper classes. . Evaluate expressions that use the Math class methods. . Evaluate Boolean expressions that use relational operators in program code. . SKILLS: . 1.B, 1.C, 2.A, 2.C, 3.A, 5.A . | C4.7 . C4.8 . | LS (11-12.1 to 11-12.6) . RSIT (11-12.1 to 12.7) . WS (11 - 12.1 to 12.6, 12.8, 12.9) . A-CED (1-4) . A-REI (1-2) F-IF (1-10) . F-LE (5-6) . C (5) . G-CO (6-8, 12) G-GMD (1-3, 5) . G-GPE (4-7) . G-MG (1, 3) G-SRT (1-3) N-RN (1-2) . N-Q (1-3) N-CN (4-6) N-VM (6-12) S-IC(1-6) . S-ID(1-6) S-MD (1-7) . APPS (10, 15, 16) . | . BOOLEAN EXPRESSIONS AND IF STATEMENTS | | | | | . Boolean Expressions . if Statements and Control Flow . if-else Statements . else if Statements . Compound Boolean Expressions . Equivalent Boolean Expressions . Comparing Objects . Introduction to Graphic-User-Interface in java . | Assignments may differ at teacher discretion . Formative . Short Debugging Exercises Programming Exercises . Introduction to GitHub for Eclipse . Quizzes . CollegeBoard Unit 3 Progress Checks . Summative . Pong - First GUI-Based Program . Unit Test . | Represent branching logical processes by using conditional statements. . Compare and contrast equivalent Boolean expressions. . Compare object references using Boolean expressions in program code. . Follow starter code for a GUI-based java project . Write if-statements for keyboard input of a java program . Use java drawing methods to draw shapes in java . Complete a java program that uses a GUI for the simple game of Pong . SKILLS: . 2.A, 2.B, 3.A, 3.C, 4.A, 4.C . | C4.9 | LS (11-12.1 to 11-12.6) . RSIT (11-12.1 to 12.7) . WS (11 - 12.1 to 12.6, 12.8, 12.9) . A-CED (1-4) . A-REI (1-2) F-IF (1-10) . F-LE (5-6) . C (5) . G-CO (6-8, 12) G-GMD (1-3, 5) . G-GPE (4-7) . G-MG (1, 3) G-SRT (1-3) N-RN (1-2) . N-Q (1-3) N-CN (4-6) N-VM (6-12) S-IC(1-6) . S-ID(1-6) S-MD (1-7) . APPS (10, 15, 16) . | . ITERATION | | | | | . while Loops . for Loops . Developing Algorithms for Strings . Nested Iteration . Code Analysis . | Assignments may differ at teacher discretion . Formative . Entry/Exit Slip Assessments . Participation . Discussions Short Debugging Exercises Programming Exercises . Quizzes . CollegeBoard Unit 4 Progress Checks . Summative . Unit Test . | Represent iterative processes using a while or for loop. . Identify, modify, and develop standard String-related algorithms . Represent nested iterative processes Compute statement execution counts and informal run-time comparison of iterative statements. . SKILLS: . 1.B, 2.B, 2.D, 3.C, 4.C, 5.C . | C4.9 | LS (11-12.1 to 11-12.6) . RSIT (11-12.1 to 12.7) . WS (11 - 12.1 to 12.6, 12.8, 12.9) . A-CED (1-4) . A-REI (1-2) F-IF (1-10) . F-LE (5-6) . C (5) . G-CO (6-8, 12) G-GMD (1-3, 5) . G-GPE (4-7) . G-MG (1, 3) G-SRT (1-3) N-RN (1-2) . N-Q (1-3) N-CN (4-6) N-VM (6-12) S-IC(1-6) . S-ID(1-6) S-MD (1-7) . APPS (10, 15, 16) . | . WRITING CLASSES | | | | | . Anatomy of a Class . Constructors . Code Comments . Accessor/Getter Methods . Mutator/Setter Methods . Writing Methods . Static Variables and Methods . Scope and Access . this Keyword . | Assignments may differ at teacher discretion . Formative . Entry/Exit Slip Assessments . Participation . Discussions . Short Debugging Exercises Programming Exercises Quizzes . Introduction to AP-Level FRQs Style 1 - Methods and Control Structures Introduction to AP-Level FRQs Style 2 - Classes . CollegeBoard Unit 5 Progress Checks . Summative . Unit Test . DuckHunt Project . | Designate access and visibility constraints to classes, data, constructors, and methods. . Designate private visibility of instance variables to encapsulate the attributes of an object. . Define instance variables for the attributes to be initialized through the constructors of a class. . Describe the functionality and use of program code through comments. . Define behaviors of an object through non-void methods without parameters written in a class. . Define behaviors of a class through static methods. . Define the static variables that belong to the class. . Explain where variables can be used in the program code. . Evaluate object reference expressions that use the keyword this . SKILLS: . 1.A,1.B, 1.C, 2.C, 3.B, 4.B, 5.A, 5.B, 5.D . | C4.5 . C4.8 . C4.11 . | LS (11-12.1 to 11-12.6) . RSIT (11-12.1 to 12.7) . WS (11 - 12.1 to 12.6, 12.8, 12.9) . A-CED (1-4) . A-REI (1-2) F-IF (1-10) . F-LE (5-6) . C (5) . G-CO (6-8, 12) G-GMD (1-3, 5) . G-GPE (4-7) . G-MG (1, 3) G-SRT (1-3) N-RN (1-2) . N-Q (1-3) N-CN (4-6) N-VM (6-12) S-IC(1-6) . S-ID(1-6) S-MD (1-7) . APPS (10, 15, 16) . | . ARRAY | | | | | . Creation and Access . Traversing Arrays . Enhanced for Loops for Arrays . Reading, Modifying, and Developing Algorithms Using Arrays . | Assignments may differ at teacher discretion . Formative . Entry/Exit Slip Assessments . Participation . Discussions . Debugging and Programming Exercises . Quizzes . CollegeBoard Unit 6 Progress Checks . Summative . Frogger / Agar.io Project . Unit Test . | Represent collections of related primitive or object reference data using one dimensional (1D) array objects. . Traverse the elements in a 1D array using a while, for, or enhanced for loop. . Identify, modify and develop array traversals algorithms. . Integrate 1D Arrays, Loops, and Objects into a GUI-Based java program. . SKILLS: . 1.C, 2.B, 4.B, 4.C, 5.D . | C4.7 | LS (11-12.1 to 11-12.6) . RSIT (11-12.1 to 12.7) . WS (11 - 12.1 to 12.6, 12.8, 12.9) . A-CED (1-4) . A-REI (1-2) F-IF (1-10) . F-LE (5-6) . C (5) . G-CO (6-8, 12) G-GMD (1-3, 5) . G-GPE (4-7) . G-MG (1, 3) G-SRT (1-3) N-RN (1-2) . N-Q (1-3) N-CN (4-6) N-VM (6-12) S-IC(1-6) . S-ID(1-6) S-MD (1-7) . APPS (10, 15, 16) . | . ARRAYLIST | | | | | . Introduction to ArrayList . ArrayList Methods . Traversing ArrayLists . Reading, Modifying and Developing Algorithms Using ArrayList . Searching - Sequential . Sorting: Insertion, Selection . | Assignments may differ at teacher discretion . Formative . Entry/Exit Slip Assessments . Participation . Discussions Debugging &amp; Programming Exercises FRQ Practice (AP Prep) . Quizzes . Infection Simulation / Agar.io Clone Re-visited with ArrayList and dynamically adding objects into simulation . CollegeBoard Unit 7 Progress Checks . Summative . Unit Test . | Represent collections of related object reference data using ArrayList objects. . Traverse ArrayList objects using while, for, and enhanced loops. . Identify, modify and develop algorithms involving traversals Apply sequential/linear search algorithms to search for specific information in an array or ArrayList of . objects. . Apply selection sort and insertion sort algorithms to sort the elements of an array or ArrayList objects. . Compute statement execution counts and informal run-time comparison of sorting algorithms. . SKILLS: . 1.B, 2.C, 2.D, 5.C . | C4.7 . C4.10 . | LS (11-12.1 to 11-12.6) . RSIT (11-12.1 to 12.7) . WS (11 - 12.1 to 12.6, 12.8, 12.9) . A-CED (1-4) . A-REI (1-2) F-IF (1-10) . F-LE (5-6) . C (5) . G-CO (6-8, 12) G-GMD (1-3, 5) . G-GPE (4-7) . G-MG (1, 3) G-SRT (1-3) N-RN (1-2) . N-Q (1-3) N-CN (4-6) N-VM (6-12) S-IC(1-6) . S-ID(1-6) S-MD (1-7) . APPS (10, 15, 16) . | . 2D ARRAY | | | | | . Creation and Access . Traversing 2D Arrays . Reading, Modifying and Developing Algorithms using 2D Arrays . | Assignments may differ at teacher discretion . Formative . Entry/Exit Slip Assessments . Participation . Discussions Debugging &amp; Programming Exercises . MagicSquares . FRQ Practice (AP Prep) . Quizzes . CollegeBoard Unit 8 Progress Checks Picture Lab / 2048 . Summative . Unit Test . | Represent collections of related primitive or object reference data using two-dimensional (2D) array objects. . Traverse 2D array objects using while, for, or enhanced for loops. . Identify or modify algorithms requiring 2D array traversals Write program code to create, traverse, and manipulate elements in 2D array objects. . SKILLS: . 1.B, 1.C, 2.B, 2.D, 4.A, . | C4.7 | LS (11-12.1 to 11-12.6) . RSIT (11-12.1 to 12.7) . WS (11 - 12.1 to 12.6, 12.8, 12.9) . A-CED (1-4) . A-REI (1-2) F-IF (1-10) . F-LE (5-6) . C (5) . G-CO (6-8, 12) G-GMD (1-3, 5) . G-GPE (4-7) . G-MG (1, 3) G-SRT (1-3) N-RN (1-2) . N-Q (1-3) N-CN (4-6) N-VM (6-12) S-IC(1-6) . S-ID(1-6) S-MD (1-7) . APPS (10, 15, 16) . | . INHERITANCE | | | | | . Creating Superclasses and Subclasses . Writing Constructors for Subclasses . | Formative . Entry/Exit Slip Assessments . Participation . Discussions . Programming Exercises . Elevens Lab . Quizzes . CollegeBoard Unit 9 Progress Checks . Summative . Unit Test . | Create an inheritance relationship from a subclass to the superclass . Define reference variables of a superclass to be assigned to an object of a subclass in the same hierarchy. . Call methods in an inheritance relationship. Call Object class methods through inheritance. . SKILLS: . 1.A, 1.C, 3.A, 3.B, 5.A, 5.D . | C4.5 . C4.8 . | LS (11-12.1 to 11-12.6) . RSIT (11-12.1 to 12.7) . WS (11 - 12.1 to 12.6, 12.8, 12.9) . A-CED (1-4) . A-REI (1-2) F-IF (1-10) . F-LE (5-6) . C (5) . G-CO (6-8, 12) G-GMD (1-3, 5) . G-GPE (4-7) . G-MG (1, 3) G-SRT (1-3) N-RN (1-2) . N-Q (1-3) N-CN (4-6) N-VM (6-12) S-IC(1-6) . S-ID(1-6) S-MD (1-7) . APPS (10, 15, 16) . | . RECURSION | | | | | . Determining the result of recursive . methods . Writing simple recursive methods: . Determining base cases and recursive . calls . Recursive Traversals on ArrayLists . and Strings . Recursive Searching Algorithm: Binary Search . Recursive Sorting Algorithm: Merge Sort . | Assignments may differ at teacher discretion . Formative . Programming Exercises . Fractal Drawing in Java - Recursvely Drawing Shapes Recursive Method Tracing Exercises . Quizzes . CollegeBoard Unit 10 Progress Checks . Summative . Unit Test Group Project . | Apply recursive search algorithms to information in String, 1D array, or ArrayList objects. Apply recursive algorithms to sort elements of an array or ArrayList objects. Determine the result of executing recursive methods. . SKILLS: . 1.B, 2.B, 2.D, 5.A, . | C4.9 . C4.10 . C5.3 . C5.6 . | LS (11-12.1 to 11-12.6) . RSIT (11-12.1 to 12.7) . WS (11 - 12.1 to 12.6, 12.8, 12.9) . A-CED (1-4) . A-REI (1-2) F-IF (1-10) . F-LE (5-6) . C (5) . G-CO (6-8, 12) G-GMD (1-3, 5) . G-GPE (4-7) . G-MG (1, 3) G-SRT (1-3) N-RN (1-2) . N-Q (1-3) N-CN (4-6) N-VM (6-12) S-IC(1-6) S-MD (1-7) . APPS (10, 15, 16) . | . ETHICAL COMPUTING | | | | | . Ethical and Social Implications of . Computing Systems . Ethical Issues Around Data Collection . | Formative . Discussions . | Explain the risks to privacy from collecting and storing personal data on computer systems. | C8.3 . C8.6 . C8.8 . C10.1 . | LS (11-12.1 to 11-12.6) . A-CED (1-4) . G-GPE (4-7) . G-MG (1, 3) . N-Q (1-3) N-CN (4-6) S-IC(1-6) S-MD (1-7) . | . SKILLS . 1.A ‚ÄÇDetermine an appropriate program design to solve a problem or accomplish a task. . 1.B ‚ÄÇDetermine code that would be used to complete code segments. . 1.C ‚ÄÇDetermine code that would be used to interact with completed program code. . | 2.A ‚ÄÇApply the meaning of specific operators. . 2.B ‚ÄÇDetermine the result or output based on statement execution order in a code segment without method calls (other than output). . 2.C ‚ÄÇDetermine the result or output based on the statement execution order in a code segment containing method calls. . 2.D ‚ÄÇDetermine the number of times a code segment will execute. . | 3.A ‚ÄÇWrite program code to create objects of a class and call methods. . 3.B ‚ÄÇWrite program code to define a new type by creating a class. . 3.C ‚ÄÇWrite program code to satisfy method specifications using expressions, conditional statements, and iterative statements. . 3.D ‚ÄÇWrite program code to create, traverse, and manipulate elements in a 1D array or ArrayList objects. . 3.E ‚ÄÇWrite program code to create, traverse, and manipulate elements in 2D array objects. . | 4.A Use test cases to find errors or validate results. . 4.B ‚ÄÇIdentify errors in program code. . 4.C ‚ÄÇDetermine if two or more code segments yield equivalent results . | 5.A ‚ÄÇDescribe the behavior of a given segment of program code. . 5.B ‚ÄÇExplain why a code segment will not compile or work as intended. . 5.C ‚ÄÇExplain how the result of program code changes, given a change to the initial code. . 5.D ‚ÄÇDescribe the initial conditions that must be met for a program segment to work as intended or described. . | .",
            "url": "https://nighthawkcoders.github.io/APCSA/2022/06/14/Curriculum-Map-David-2021-2022.html",
            "relUrl": "/2022/06/14/Curriculum-Map-David-2021-2022.html",
            "date": " ‚Ä¢ Jun 14, 2022"
        }
        
    
  

  
  

  

  
      ,"page2": {
          "title": "About Us",
          "content": "Name Role Profile Issues Commits . John Mortensen | Teacher | Profile | Issues | Commits | . Bria Gilliam | Student | Profile | Issues | Commits | . Allie Xiao | Student | Profile | Issues | Commits | .",
          "url": "https://nighthawkcoders.github.io/APCSA/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  

  
  

  
  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ ‚Äúsitemap.xml‚Äù | absolute_url }} | .",
          "url": "https://nighthawkcoders.github.io/APCSA/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}